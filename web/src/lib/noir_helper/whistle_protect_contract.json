{
    "noir_version": "1.0.0-beta.6+e796dfd67726cbc28eb9991782533b211025928d",
    "hash": "7652391282341454124",
    "abi": {
        "parameters": [
            {
                "name": "header",
                "type": {
                    "kind": "struct",
                    "path": "std::collections::bounded_vec::BoundedVec",
                    "fields": [
                        {
                            "name": "storage",
                            "type": {
                                "kind": "array",
                                "length": 1024,
                                "type": {
                                    "kind": "integer",
                                    "sign": "unsigned",
                                    "width": 8
                                }
                            }
                        },
                        {
                            "name": "len",
                            "type": {
                                "kind": "integer",
                                "sign": "unsigned",
                                "width": 32
                            }
                        }
                    ]
                },
                "visibility": "private"
            },
            {
                "name": "pubkey",
                "type": {
                    "kind": "struct",
                    "path": "zkemail::dkim::RSAPubkey",
                    "fields": [
                        {
                            "name": "modulus",
                            "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        },
                        {
                            "name": "redc",
                            "type": {
                                "kind": "array",
                                "length": 18,
                                "type": {
                                    "kind": "field"
                                }
                            }
                        }
                    ]
                },
                "visibility": "private"
            },
            {
                "name": "signature",
                "type": {
                    "kind": "array",
                    "length": 18,
                    "type": {
                        "kind": "field"
                    }
                },
                "visibility": "private"
            }
        ],
        "return_type": {
            "abi_type": {
                "kind": "boolean"
            },
            "visibility": "public"
        },
        "error_types": {
            "2920182694213909827": {
                "error_kind": "string",
                "string": "attempt to subtract with overflow"
            },
            "5019202896831570965": {
                "error_kind": "string",
                "string": "attempt to add with overflow"
            },
            "6485997221020871071": {
                "error_kind": "string",
                "string": "call to assert_max_bit_size"
            },
            "7233212735005103307": {
                "error_kind": "string",
                "string": "attempt to multiply with overflow"
            },
            "14225679739041873922": {
                "error_kind": "string",
                "string": "Index out of bounds"
            },
            "14514982005979867414": {
                "error_kind": "string",
                "string": "attempt to bit-shift with overflow"
            },
            "17843811134343075018": {
                "error_kind": "string",
                "string": "Stack too deep"
            }
        }
    },
    "bytecode": "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",
    "debug_symbols": "",
    "file_map": {
        "5": {
            "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
            "path": "std/cmp.nr"
        },
        "17": {
            "source": "use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n",
            "path": "std/field/bn254.nr"
        },
        "18": {
            "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        __assert_max_bit_size(self, BIT_SIZE);\n    }\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = __to_le_bits(self);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = __to_be_bits(self);\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        __to_le_radix(self, radix)\n    }\n\n    fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        __to_be_radix(self, radix)\n    }\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(apply_range_constraint)]\nfn __assert_max_bit_size(value: Field, bit_size: u32) {}\n\n// `_radix` must be less than 256\n#[builtin(to_le_radix)]\nfn __to_le_radix<let N: u32>(value: Field, radix: u32) -> [u8; N] {}\n\n// `_radix` must be less than 256\n#[builtin(to_be_radix)]\nfn __to_be_radix<let N: u32>(value: Field, radix: u32) -> [u8; N] {}\n\n/// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n/// This slice will be zero padded should not all bits be necessary to represent `self`.\n///\n/// # Failures\n/// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n/// be able to represent the original `Field`.\n///\n/// # Safety\n/// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n/// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n/// wrap around due to overflow when verifying the decomposition.\n#[builtin(to_le_bits)]\nfn __to_le_bits<let N: u32>(value: Field) -> [u1; N] {}\n\n/// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n/// This array will be zero padded should not all bits be necessary to represent `self`.\n///\n/// # Failures\n/// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n/// be able to represent the original `Field`.\n///\n/// # Safety\n/// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n/// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n/// wrap around due to overflow when verifying the decomposition.\n#[builtin(to_be_bits)]\nfn __to_be_bits<let N: u32>(value: Field) -> [u1; N] {}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n",
            "path": "std/field/mod.nr"
        },
        "50": {
            "source": "use std::collections::bounded_vec::BoundedVec;\nuse zkemail::{\n    dkim::RSAPubkey, headers::email_address::get_email_address, KEY_LIMBS_2048,\n    MAX_EMAIL_ADDRESS_LENGTH, Sequence,\n};\n\nglobal MAX_EMAIL_HEADER_LENGTH: u32 = 1024;\n\n/**\n * Verify an arbitrary email signed by a 2048-bit RSA DKIM signature and extract sender and recipient addresses\n * @dev example of only constraining access to the header too\n *\n * @param header - The email header, 0-padded at end to the MAX_EMAIL_HEADER_LENGTH\n * @param pubkey - The DKIM RSA Public Key modulus and reduction parameter\n * @param signature - The DKIM RSA Signature\n * @param from_header_sequence - The index and length of the \"From\" header field\n * @param from_address_sequence - The index and length of the \"From\" email address\n * @param to_header_sequence - The index and length of the \"To\" header field\n * @param to_address_sequence - The index and length of the \"To\" email address\n * @return - \n *         0: Pedersen hash of DKIM public key (root of trust)\n *         1: Pedersen hash of DKIM signature (email nullifier)\n */\nfn main(\n    header: BoundedVec<u8, MAX_EMAIL_HEADER_LENGTH>,\n    pubkey: RSAPubkey<KEY_LIMBS_2048>,\n    signature: [Field; KEY_LIMBS_2048],\n  //  from_header_sequence: Sequence,\n  //  from_address_sequence: Sequence,\n  //  to_header_sequence: Sequence,\n  //  to_address_sequence: Sequence,\n) -> pub (bool) {\n    // check the body and header lengths are within bounds\n    //   assert(header.len() <= MAX_EMAIL_HEADER_LENGTH);\n\n    // verify the dkim signature over the header\n    pubkey.verify_dkim_signature(header, signature);\n\n    // extract to and from email addresses\n//   let from = comptime { \"from\".as_bytes() };\n  //  let to = comptime { \"to\".as_bytes() };\n    // // 16k gate cost? has to be able to be brought down\n  //  let from_address = get_email_address(header, from_header_sequence, from_address_sequence, from);\n  //  let to_address = get_email_address(header, to_header_sequence, to_address_sequence, to);\n\n    // // hash the pubkey and signature for the standard outputs\n    // let email_nullifier = pedersen_hash(signature);\n    // let standard_out = [pubkey.hash(), email_nullifier];\n    // (standard_out, from_address, to_address)\n  /*\n    let domain_symbol: u8 = 10;\n    let mut acc: u32 = 0;\n    let acc_ref = &mut acc;\n\n    to_address.for_eachi(|i, value| {\n        if (domain_symbol == value) {\n            *acc_ref = i;\n        }\n    });\n\n    // Safety: 'out' is properly constrained below in 'sub_str'\n    let to_domain_name = unsafe { sub_str(to_address, *acc_ref) };\n\n    //extract from domain\n    let mut acc2: u32 = 0;\n    let acc_ref2 = &mut acc;\n\n    from_address.for_eachi(|i, value| {\n        if (domain_symbol == value) {\n            *acc_ref2 = i;\n        }\n    });\n\n    // Safety: 'out' is properly constrained below in 'sub_str'\n    let from_domain_name = unsafe { sub_str(from_address, *acc_ref) };\n*/\n   // assert(to_address.len() == 19, \"from email mismatch\");\n  //  assert(from_address.len() == 20, \"to email mismatch\");\n  // let mut g: BoundedVec<u8, 254> = BoundedVec::from_array([]);\n  true\n}\n",
            "path": "/Users/himank/workspace/proof-leak/proof_leak_circuits/src/main.nr"
        },
        "51": {
            "source": "use crate::{KEY_LIMBS_1024, KEY_LIMBS_2048, RSA_EXPONENT};\nuse bignum::{params::BigNumParams, RuntimeBigNum};\nuse poseidon::poseidon;\nuse rsa::{rsa::verify_sha256_pkcs1v15, types::{RBN1024, RBN2048}};\nuse sha256::sha256_var;\n\npub struct RSAPubkey<let KEY_LIMBS: u32> {\n    modulus: [Field; KEY_LIMBS],\n    redc: [Field; KEY_LIMBS],\n}\n\nimpl<let KEY_LIMBS: u32> RSAPubkey<KEY_LIMBS> {\n\n    pub fn new(modulus: [Field; KEY_LIMBS], redc: [Field; KEY_LIMBS]) -> Self {\n        let pubkey = Self { modulus, redc };\n        pubkey\n    }\n}\n\nimpl RSAPubkey<KEY_LIMBS_1024> {\n    pub fn verify_dkim_signature<let MAX_HEADER_LENGTH: u32>(\n        self,\n        header: BoundedVec<u8, MAX_HEADER_LENGTH>,\n        signature: [Field; KEY_LIMBS_1024],\n    ) -> [u8; 32] {\n        // hash the header\n        let header_hash = sha256_var(header.storage(), header.len() as u64);\n\n        let params: BigNumParams<KEY_LIMBS_1024, 1024> = BigNumParams::new(\n            false,\n            convert_field_to_u128(self.modulus),\n            convert_field_to_u128(self.redc),\n        );\n\n        let signature: RBN1024 =\n            RuntimeBigNum::from_array(params, convert_field_to_u128(signature));\n        signature.validate_in_range();\n\n        // verify the DKIM signature over the header\n        assert(verify_sha256_pkcs1v15(header_hash, signature, RSA_EXPONENT));\n\n        header_hash\n    }\n\n    pub fn hash(self) -> Field {\n        // validate\n        self.validate_in_range();\n        let mut dkim_preimage = [0; 9];\n        // compose first 4 limbs of modulus and redc\n        for i in 0..4 {\n            let modulus_hi = self.modulus[i * 2] * 2.pow_32(120);\n            let redc_hi = self.redc[i * 2] * 2.pow_32(120);\n            dkim_preimage[i] = modulus_hi + self.modulus[i * 2 + 1];\n            dkim_preimage[i + 4] = redc_hi + self.redc[i * 2 + 1];\n        }\n        // compose last two elements of redc and modulus together\n        let modulus_hi = self.modulus[8] * 2.pow_32(120);\n        dkim_preimage[8] = modulus_hi + self.redc[8];\n        // hash the pubkey\n        poseidon::bn254::hash_9(dkim_preimage)\n    }\n\n    pub fn validate_in_range(self) {\n        for i in 0..(KEY_LIMBS_1024 - 1) {\n            self.modulus[i].assert_max_bit_size::<120>();\n            self.redc[i].assert_max_bit_size::<120>();\n        }\n        self.modulus[KEY_LIMBS_1024 - 1].assert_max_bit_size::<1024 - ((KEY_LIMBS_1024 - 1) * 120)>();\n        self.redc[KEY_LIMBS_1024 - 1].assert_max_bit_size::<120>();\n    }\n}\n\nimpl RSAPubkey<KEY_LIMBS_2048> {\n    pub fn verify_dkim_signature<let MAX_HEADER_LENGTH: u32>(\n        self,\n        header: BoundedVec<u8, MAX_HEADER_LENGTH>,\n        signature: [Field; KEY_LIMBS_2048],\n    ) -> [u8; 32] {\n        // hash the header\n        let header_hash = sha256_var(header.storage(), header.len() as u64);\n\n        let params: BigNumParams<KEY_LIMBS_2048, 2048> = BigNumParams::new(\n            false,\n            convert_field_to_u128(self.modulus),\n            convert_field_to_u128(self.redc),\n        );\n\n        let signature: RBN2048 =\n            RuntimeBigNum::from_array(params, convert_field_to_u128(signature));\n        signature.validate_in_range();\n\n        // verify the DKIM signature over the header\n        assert(verify_sha256_pkcs1v15(header_hash, signature, RSA_EXPONENT));\n\n        header_hash\n    }\n\n    pub fn hash(self) -> Field {\n        // validate range\n        self.validate_in_range();\n        let mut chunk1 = [0; 9];\n        let mut chunk2 = [0; 9];\n\n        // compose limbs\n        for i in 0..9 {\n            let modulus_hi = self.modulus[i * 2] * 2.pow_32(120);\n            let redc_hi = self.redc[i * 2] * 2.pow_32(120);\n            chunk1[i] = modulus_hi + self.modulus[i * 2 + 1];\n            chunk2[i] = redc_hi + self.redc[i * 2 + 1];\n        }\n\n        let hash_of_chunk1 = poseidon::bn254::hash_9(chunk1);\n        let hash_of_chunk2 = poseidon::bn254::hash_9(chunk2);\n\n        poseidon::bn254::hash_2([hash_of_chunk1, hash_of_chunk2])\n    }\n\n    pub fn validate_in_range(self) {\n        for i in 0..(KEY_LIMBS_2048 - 1) {\n            self.modulus[i].assert_max_bit_size::<120>();\n            self.redc[i].assert_max_bit_size::<120>();\n        }\n        self.modulus[KEY_LIMBS_2048 - 1].assert_max_bit_size::<2048 - ((KEY_LIMBS_2048 - 1) * 120)>();\n        self.redc[KEY_LIMBS_2048 - 1].assert_max_bit_size::<120>(); // we get 2053 sometimes?\n    }\n}\n\n// convert a Field array to a u128 array with generic number of limbs\nfn convert_field_to_u128<let KEY_LIMBS: u32>(signature: [Field; KEY_LIMBS]) -> [u128; KEY_LIMBS] {\n    let mut u128_signature: [u128; KEY_LIMBS] = [0; KEY_LIMBS];\n    for i in 0..KEY_LIMBS {\n        u128_signature[i] = signature[i] as u128;\n    }\n    u128_signature\n}\n",
            "path": "/Users/himank/nargo/github.com/zkemail/zkemail.nr/v.1.0.0-beta.5/lib/src/dkim.nr"
        },
        "102": {
            "source": "use crate::constants::TWO_POW_120;\nuse crate::fns::{\n    expressions::evaluate_quadratic_expression,\n    unconstrained_helpers::{\n        __add_with_flags, __from_field, __neg_with_flags, __sub_with_flags, __validate_gt_remainder,\n        __validate_in_field_compute_borrow_flags,\n    },\n    unconstrained_ops::{__add, __div, __mul, __neg, __sub, __udiv_mod},\n};\nuse crate::params::BigNumParams as P;\n\n/**\n * In this file:\n *\n * conditional_select\n * assert_is_not_equal\n * eq\n * validate_in_field\n * validate_in_range\n * validate_quotient_in_range\n * validate_gt\n * neg\n * add\n * sub\n * mul\n * div\n * udiv_mod\n * udiv\n * umod\n */\n\npub(crate) fn limbs_to_field<let N: u32, let MOD_BITS: u32>(\n    _params: P<N, MOD_BITS>,\n    limbs: [u128; N],\n) -> Field {\n    if N > 2 {\n        // validate that the limbs is less than the modulus the grumpkin modulus\n        let mut grumpkin_modulus = [0; N];\n        grumpkin_modulus[0] = 0x33e84879b9709143e1f593f0000001;\n        grumpkin_modulus[1] = 0x4e72e131a029b85045b68181585d28;\n        grumpkin_modulus[2] = 0x3064;\n        validate_gt::<N, MOD_BITS>(grumpkin_modulus, limbs);\n        // validate that the limbs are in range\n        validate_in_range::<_, N, MOD_BITS>(limbs);\n    }\n    // validate the limbs sum up to the field value\n    if N < 2 {\n        limbs[0] as Field\n    } else if N == 2 {\n        validate_in_range::<_, N, MOD_BITS>(limbs);\n        (limbs[0] + limbs[1] * TWO_POW_120) as Field\n    } else {\n        // validate_in_range::<N, 254>(limbs);\n        (\n            limbs[0] as Field\n                + limbs[1] as Field * TWO_POW_120 as Field\n                + limbs[2] as Field * TWO_POW_120 as Field * TWO_POW_120 as Field\n        )\n    }\n}\n\npub(crate) fn from_field<let N: u32, let MOD_BITS: u32>(field: Field) -> [u128; N] {\n    // Safety: we check that the resulting limbs represent the intended field element\n    // we check the bit length, the limbs being max 120 bits, and the value in total is less than the field modulus\n    let result: [u128; N] = unsafe { __from_field::<N>(field) };\n    if !std::runtime::is_unconstrained() {\n        // validate the limbs are in range and the value in total is less than 2^254\n\n        // validate that the last limb is less than the modulus\n        if N > 2 {\n            // validate that the result is less than the modulus\n            let mut grumpkin_modulus = [0; N];\n            grumpkin_modulus[0] = 0x33e84879b9709143e1f593f0000001;\n            grumpkin_modulus[1] = 0x4e72e131a029b85045b68181585d28;\n            grumpkin_modulus[2] = 0x3064;\n            validate_gt::<N, MOD_BITS>(grumpkin_modulus, result);\n            // validate that the limbs are in range\n            validate_in_range::<_, N, MOD_BITS>(result);\n        }\n        // validate the limbs sum up to the field value\n        let TWO_POW_120_FIELD = TWO_POW_120 as Field;\n        let field_val = if N < 2 {\n            result[0] as Field\n        } else if N == 2 {\n            validate_in_range::<_, N, MOD_BITS>(result);\n            result[0] as Field + result[1] as Field * TWO_POW_120_FIELD\n        } else {\n            validate_in_range::<_, N, MOD_BITS>(result);\n            result[0] as Field\n                + result[1] as Field * TWO_POW_120_FIELD\n                + result[2] as Field * TWO_POW_120_FIELD * TWO_POW_120_FIELD\n        };\n        assert_eq(field_val, field);\n    }\n\n    result\n}\n\n/**\n* @brief given an input seed, generate a pseudorandom BigNum value\n* @details we hash the input seed into `modulus_bits * 2` bits of entropy,\n* which is then reduced into a BigNum value\n* We use a hash function that can be modelled as a random oracle\n* This function *should* produce an output that is a uniformly randomly distributed value modulo BigNum::modulus()\n**/\n\npub(crate) fn derive_from_seed<let N: u32, let MOD_BITS: u32, let SeedBytes: u32>(\n    params: P<N, MOD_BITS>,\n    seed: [u8; SeedBytes],\n) -> [u128; N] {\n    let mut rolling_seed: [u8; SeedBytes + 1] = [0; SeedBytes + 1];\n    for i in 0..SeedBytes {\n        rolling_seed[i] = seed[i];\n        assert_eq(rolling_seed[i], seed[i]);\n    }\n\n    let mut hash_buffer: [u8; N * 2 * 15] = [0; N * 2 * 15];\n\n    let mut rolling_hash_fields: [Field; (SeedBytes / 31) + 1] = [0; (SeedBytes / 31) + 1];\n    let mut seed_ptr = 0;\n    for i in 0..(SeedBytes / 31) + 1 {\n        let mut packed: Field = 0;\n        for _ in 0..31 {\n            if (seed_ptr < SeedBytes) {\n                packed *= 256;\n                packed += seed[seed_ptr] as Field;\n                seed_ptr += 1;\n            }\n        }\n        rolling_hash_fields[i] = packed;\n    }\n\n    let compressed =\n        std::hash::poseidon2::Poseidon2::hash(rolling_hash_fields, (SeedBytes / 31) + 1);\n    let mut rolling_hash: [Field; 2] = [compressed, 0];\n\n    let num_hashes = (240 * N) / 254 + (((30 * N) % 32) != 0) as u32;\n    for i in 0..num_hashes - 1 {\n        let hash: Field = std::hash::poseidon2::Poseidon2::hash(rolling_hash, 2);\n        let hash: [u8; 32] = hash.to_le_bytes();\n        for j in 0..30 {\n            hash_buffer[i * 30 + j] = hash[j];\n        }\n        rolling_hash[1] += 1;\n    }\n\n    {\n        let hash: Field = std::hash::poseidon2::Poseidon2::hash(rolling_hash, 2);\n        let hash: [u8; 32] = hash.to_le_bytes();\n        let remaining_bytes = 30 * N - (num_hashes - 1) * 30;\n        for j in 0..remaining_bytes {\n            hash_buffer[(num_hashes - 1) * 30 + j] = hash[j];\n        }\n    }\n\n    let num_bits = MOD_BITS * 2;\n    let num_bytes = num_bits / 8 + ((num_bits % 8) != 0) as u32;\n\n    let bits_in_last_byte = num_bits as u8 % 8;\n    let last_byte_mask = (1 as u8 << bits_in_last_byte) - 1;\n    hash_buffer[num_bytes - 1] = hash_buffer[num_bytes - 1] & last_byte_mask;\n\n    let num_bigfield_chunks = (2 * N) / (N - 1) + (((2 * N) % (N - 1)) != 0) as u32;\n    let mut byte_ptr = 0;\n\n    // we want to convert our byte array into bigfield chunks\n    // each chunk has at most N-1 limbs\n    // to determine the exact number of chunks, we need the `!=` or `>` operator which is not avaiable when defining array sizes\n    // so we overestimate at 4\n    // e.g. if N = 20, then we have 40 limbs we want to reduce, but each bigfield chunk is 19 limbs, so we need 3\n    // if N = 2, we have 4 limbs we want to reduce but each bigfield chunk is only 1 limb, so we need 4\n    // max possible number of chunks is therefore 4\n    let mut bigfield_chunks: [[u128; N]; 4] = [[0; N]; 4];\n    for k in 0..num_bigfield_chunks {\n        let mut bigfield_limbs: [u128; N] = [0; N];\n        let mut num_filled_bytes = (k * 30);\n        let mut num_remaining_bytes = num_bytes - num_filled_bytes;\n        let mut num_remaining_limbs =\n            (num_remaining_bytes / 15) + (num_remaining_bytes % 15 > 0) as u32;\n        let mut more_than_N_minus_one_limbs = (num_remaining_limbs > (N - 1)) as u32;\n        let mut num_limbs_in_bigfield = more_than_N_minus_one_limbs * (N - 1)\n            + num_remaining_limbs * (1 - more_than_N_minus_one_limbs);\n\n        for j in 0..num_limbs_in_bigfield {\n            let mut limb: u128 = 0;\n            for _ in 0..15 {\n                let need_more_bytes = (byte_ptr < num_bytes);\n                let mut byte = hash_buffer[byte_ptr];\n                limb *= (256 * need_more_bytes as u128 + (1 - need_more_bytes as u128));\n                limb += byte as u128 * need_more_bytes as u128;\n                byte_ptr += need_more_bytes as u32;\n            }\n            bigfield_limbs[num_limbs_in_bigfield - 1 - j] = limb;\n        }\n        bigfield_chunks[num_bigfield_chunks - 1 - k] = bigfield_limbs;\n    }\n\n    let mut bigfield_rhs_limbs: [u128; N] = [0; N];\n    bigfield_rhs_limbs[N - 1] = 1;\n    validate_in_range::<_, _, MOD_BITS>(bigfield_rhs_limbs);\n\n    let mut result: [u128; N] = [0; N];\n\n    for i in 0..num_bigfield_chunks {\n        let bigfield_lhs_limbs = bigfield_chunks[i];\n\n        // result = mul(params, result, bigfield_rhs_limbs);\n        result = add(params, result, bigfield_lhs_limbs);\n    }\n\n    result\n}\n\n/**\n* @brief conditional_select given the value of `predicate` return either `self` (if 0) or `other` (if 1)\n* @description should be cheaper than using an IF statement (TODO: check!)\n**/\npub(crate) fn conditional_select<let N: u32>(\n    lhs: [u128; N],\n    rhs: [u128; N],\n    predicate: bool,\n) -> [u128; N] {\n    let mut result: [u128; N] = lhs;\n    for i in 0..N {\n        // (lhs[i] - rhs[i]) * predicate + rhs[i]\n        // in case lhs < rhs, this will underflow so we have to do one extra multiplication to prevent it\n        result[i] = lhs[i] * predicate as u128 + rhs[i] * (1 - predicate as u128);\n    }\n    result\n}\n\n/**\n    * @brief Validate self != other\n    * @details If A == B, then A == B mod N.\n    *          We can efficiently evaluate A == B mod N where N = circuit modulus\n    *          This method is *sound*, but not *complete* (i.e. A != B but A == B mod N)\n    *          However the probability of an honest Prover being unable to satisfy this check is tiny!\n    *          (todo: compute how tiny)\n    **/\npub(crate) fn assert_is_not_equal<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [u128; N],\n    rhs: [u128; N],\n) {\n    let mut l: Field = 0;\n    let mut r: Field = 0;\n    let mut modulus_mod_n: Field = 0;\n    for i in 0..N {\n        l *= TWO_POW_120 as Field;\n        r *= TWO_POW_120 as Field;\n        modulus_mod_n *= TWO_POW_120 as Field;\n        l += lhs[N - i - 1] as Field;\n        r += rhs[N - i - 1] as Field;\n        modulus_mod_n += params.modulus[N - i - 1] as Field;\n    }\n\n    // lhs can be either X mod N or P + X mod N\n    // rhs can be either Y mod N or P + Y mod N\n    // If lhs - rhs = 0 mod P then lhs - rhs = 0, P or -P mod N\n    let diff = l - r;\n    let target = diff * (diff + modulus_mod_n) * (diff - modulus_mod_n);\n    assert(target != 0, \"asssert_is_not_equal fail\");\n}\n\npub(crate) fn eq<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [u128; N],\n    rhs: [u128; N],\n) -> bool {\n    let diff = sub::<_, MOD_BITS>(params, lhs, rhs);\n    // if self == other, possible values of `diff` will be `p` or `0`\n    // (the subtract operator constrains diff to be < ceil(log(p)))\n    // TODO: can do this more efficiently via witngen in unconstrained functions?\n    let is_equal_modulus: bool = diff == params.modulus;\n    let is_equal_zero: bool = diff.all(|elem| elem == 0);\n    is_equal_modulus | is_equal_zero\n}\n\npub(crate) fn is_zero<let N: u32, let MOD_BITS: u32>(val: [u128; N]) -> bool {\n    val.all(|limb| limb == 0)\n}\n\npub(crate) fn validate_in_field<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [u128; N],\n) {\n    // N.B. need to combine with validate_in_range if `self` limbs have not been range constrained\n    let mut p_minus_self: [Field; N] = [0; N];\n    let modulus: [u128; N] = params.modulus;\n    for i in 0..N {\n        p_minus_self[i] = (modulus[i] as Field - val[i] as Field);\n    }\n    let borrow_flags = unsafe { __validate_in_field_compute_borrow_flags(params, val) };\n    p_minus_self[0] += (borrow_flags[0] as Field * TWO_POW_120 as Field);\n    for i in 1..N - 1 {\n        p_minus_self[i] +=\n            (borrow_flags[i] as Field * TWO_POW_120 as Field - borrow_flags[i - 1] as Field);\n    }\n    p_minus_self[N - 1] -= (borrow_flags[N - 2] as Field);\n    validate_in_range::<_, _, MOD_BITS>(p_minus_self);\n}\n\n/**\n* @brief Validate a BigNum instance is correctly range constrained to contain no more than Params::modulus_bits()\n**/\npub(crate) fn validate_in_range<T, let N: u32, let MOD_BITS: u32>(limbs: [T; N])\nwhere\n    T: Into<Field>,\n{\n    for i in 0..(N - 1) {\n        limbs[i].into().assert_max_bit_size::<120>();\n    }\n\n    limbs[N - 1].into().assert_max_bit_size::<MOD_BITS - ((N - 1) * 120)>();\n}\n\n/**\n* @brief validate quotient produced from `evaluate_quadratic_expression` is well-formed\n* @description because the inputs into evaluate_quadratic_expression may cause the quotient to extend beyond `Params::modulus_bits`.\n*              We allow the quotient to extend 6 bits beyond Params::modulus_bits()\n*              Why is this?\n*              several factors:    1. quotient * modulus , limbs cannot overflow field boundary (254 bits)\n*                                  2. in `evaluate_quadratic_expression`, we require that for `expression - quotient * modulus`,\n*                                     limbs cannot exceed 246 bits (246 magic number due to a higher number adding extra range check gates)\n*              because of factor 2 and the fact that modulus limbs are 120 bits, quotient limbs cannot be >126 bits\n*\n*              Note: doesn't this mean that final_limb_bits should be constrained to be 126 bits, not modulus_bits() - ((N - 1) * 120) + 6?\n*              TODO: think about this more! we want the range constraint we apply to be as small as allowable as this is more efficient\n**/\npub(crate) fn validate_quotient_in_range<let N: u32, let MOD_BITS: u32>(limbs: [u128; N]) {\n    for i in 0..(N) {\n        (limbs[i] as Field).assert_max_bit_size::<120>();\n    }\n    // Note: replace magic number 6 with definition\n    (limbs[N - 1] as Field).assert_max_bit_size::<MOD_BITS - ((N - 1) * 120) + 6>();\n}\n\n// validate that lhs - rhs does not underflow i.e. lhs > rhs\npub(crate) fn validate_gt<let N: u32, let MOD_BITS: u32>(lhs: [u128; N], rhs: [u128; N]) {\n    // so we do... p - x - r = 0 and there might be borrow flags\n    // a - b = r\n    // p + a - b - r = 0\n\n    let (result, carry_flags, borrow_flags) = unsafe { __validate_gt_remainder(lhs, rhs) };\n    validate_in_range::<_, _, MOD_BITS>(result);\n\n    let mut addend: [Field; N] = [0; N];\n    let result_limb = lhs[0] as Field - rhs[0] as Field + addend[0] - result[0] as Field - 1\n        + (borrow_flags[0] as Field - carry_flags[0] as Field) * TWO_POW_120 as Field;\n    assert(result_limb == 0);\n\n    for i in 1..N - 1 {\n        let prev_borrow_sub_carry = borrow_flags[i - 1] as Field - carry_flags[i - 1] as Field;\n        let borrow_sub_carry = borrow_flags[i] as Field - carry_flags[i] as Field;\n        let result_limb = lhs[i] as Field - rhs[i] as Field + addend[i]\n            - result[i] as Field\n            - prev_borrow_sub_carry\n            + borrow_sub_carry * TWO_POW_120 as Field;\n        assert(result_limb == 0);\n    }\n\n    let result_limb = lhs[N - 1] as Field - rhs[N - 1] as Field + addend[N - 1]\n        - result[N - 1] as Field\n        - borrow_flags[N - 2] as Field\n        + carry_flags[N - 2] as Field;\n    assert(result_limb == 0);\n}\n\npub(crate) fn neg<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [u128; N],\n) -> [u128; N] {\n    if std::runtime::is_unconstrained() {\n        // Safety: not need to constrain in unconstrained runtime\n        unsafe {\n            __neg(params, val)\n        }\n    } else {\n        // so we do... p - x - r = 0 and there might be borrow flags\n        let (result, borrow_flags) = unsafe { __neg_with_flags(params, val) };\n        validate_in_range::<_, _, MOD_BITS>(result);\n        let modulus = params.modulus;\n        let result_limb = modulus[0] + (borrow_flags[0] as u128 * TWO_POW_120) - val[0] - result[0];\n        assert(result_limb == 0);\n        for i in 1..N - 1 {\n            let result_limb = modulus[i] + (borrow_flags[i] as u128 * TWO_POW_120)\n                - val[i]\n                - result[i]\n                - borrow_flags[i - 1] as u128;\n            assert(result_limb == 0);\n        }\n        let result_limb = modulus[N - 1] - val[N - 1] - result[N - 1] - borrow_flags[N - 2] as u128;\n        assert(result_limb == 0);\n        result\n    }\n}\n\npub(crate) fn add<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [u128; N],\n    rhs: [u128; N],\n) -> [u128; N] {\n    if std::runtime::is_unconstrained() {\n        // Safety: not need to constrain in unconstrained runtime\n        unsafe {\n            // __add_u128(params, lhs, rhs)\n            __add(params, lhs, rhs)\n        }\n    } else {\n        // so we do... p - x - r = 0 and there might be borrow flags\n        let (result, carry_flags, borrow_flags, overflow_modulus) =\n            unsafe { __add_with_flags(params, lhs, rhs) };\n        validate_in_range::<_, _, MOD_BITS>(result);\n        let modulus = params.modulus;\n\n        let mut subtrahend: [u128; N] = [0; N];\n        if (overflow_modulus) {\n            subtrahend = modulus;\n        }\n        let borrow_sub_carry = borrow_flags[0] as Field - carry_flags[0] as Field;\n        let result_limb = lhs[0] as Field + rhs[0] as Field\n            - subtrahend[0] as Field\n            - result[0] as Field\n            + borrow_sub_carry * TWO_POW_120 as Field;\n        assert(result_limb == 0);\n        for i in 1..N - 1 {\n            let prev_borrow_sub_carry = borrow_flags[i - 1] as Field - carry_flags[i - 1] as Field;\n            let borrow_sub_carry = borrow_flags[i] as Field - carry_flags[i] as Field;\n            let result_limb = lhs[i] as Field + rhs[i] as Field\n                - subtrahend[i] as Field\n                - result[i] as Field\n                - prev_borrow_sub_carry\n                + borrow_sub_carry * TWO_POW_120 as Field;\n            assert(result_limb == 0);\n        }\n        let borrow_sub_carry = borrow_flags[N - 2] as Field - carry_flags[N - 2] as Field;\n        let result_limb = lhs[N - 1] as Field + rhs[N - 1] as Field\n            - subtrahend[N - 1] as Field\n            - result[N - 1] as Field\n            - borrow_sub_carry as Field;\n        assert(result_limb == 0);\n        result\n    }\n}\n\npub(crate) fn sub<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [u128; N],\n    rhs: [u128; N],\n) -> [u128; N] {\n    if std::runtime::is_unconstrained() {\n        // Safety: not need to constrain in unconstrained runtime\n        unsafe {\n            __sub(params, lhs, rhs)\n        }\n    } else {\n        // so we do... p - x - r = 0 and there might be borrow flags\n        // a - b = r\n        // p + a - b - r = 0\n        let (result, carry_flags, borrow_flags, underflow) =\n            unsafe { __sub_with_flags(params, lhs, rhs) };\n\n        validate_in_range::<_, _, MOD_BITS>(result);\n        let modulus = params.modulus;\n\n        let mut addend: [u128; N] = [0; N];\n        if (underflow) {\n            addend = modulus;\n        }\n\n        let borrow_sub_carry = borrow_flags[0] as Field - carry_flags[0] as Field;\n        let result_limb = borrow_sub_carry * TWO_POW_120 as Field\n            + addend[0] as Field\n            + lhs[0] as Field\n            - rhs[0] as Field\n            - result[0] as Field;\n        assert(result_limb == 0);\n        for i in 1..N - 1 {\n            let prev_borrow_sub_carry = borrow_flags[i - 1] as Field - carry_flags[i - 1] as Field;\n            let borrow_sub_carry = borrow_flags[i] as Field - carry_flags[i] as Field;\n            let result_limb = borrow_sub_carry * TWO_POW_120 as Field\n                + addend[i] as Field\n                + lhs[i] as Field\n                - rhs[i] as Field\n                - result[i] as Field\n                - prev_borrow_sub_carry;\n            assert(result_limb == 0);\n        }\n        let borrow_sub_carry = borrow_flags[N - 2] as Field - carry_flags[N - 2] as Field;\n        let result_limb = addend[N - 1] as Field + lhs[N - 1] as Field\n            - rhs[N - 1] as Field\n            - result[N - 1] as Field\n            - borrow_sub_carry as Field;\n        assert(result_limb == 0);\n        result\n    }\n}\n\n// Note: this method is expensive! Try to craft quadratic relations and directly evaluate them\n//       via evaluate_quadratic_expression\n// e.g. performing a sum of multiple multiplications and additions via `evaluate_quadratic_expression`\n//      will create much fewer constraints than calling `mul` and `add` directly\npub(crate) fn mul<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [u128; N],\n    rhs: [u128; N],\n) -> [u128; N] {\n    let result = unsafe { __mul::<_, MOD_BITS>(params, lhs, rhs) };\n    if !std::runtime::is_unconstrained() {\n        evaluate_quadratic_expression(\n            params,\n            [[lhs]],\n            [[false]],\n            [[rhs]],\n            [[false]],\n            [result],\n            [true],\n        );\n    }\n    result\n}\n\n// Note: this method is expensive! Witness computation is extremely expensive as it requires modular exponentiation\npub(crate) fn div<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [u128; N],\n    rhs: [u128; N],\n) -> [u128; N] {\n    assert(\n        params.has_multiplicative_inverse,\n        \"BigNum has no multiplicative inverse. Use udiv for unsigned integer division\",\n    );\n    let result = unsafe { __div::<_, MOD_BITS>(params, lhs, rhs) };\n    if !std::runtime::is_unconstrained() {\n        evaluate_quadratic_expression(\n            params,\n            [[result]],\n            [[false]],\n            [[rhs]],\n            [[false]],\n            [lhs],\n            [true],\n        );\n    }\n    result\n}\n\n/**\n* @brief udiv_mod performs integer division between numerator, divisor\n*\n* i.e. 1. floor(numerator / divisor) = quotient\n*      2. numerator % divisor = remainder\n*      3. divisor * quotient + remainder = numerator\n**/\npub(crate) fn udiv_mod<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    numerator: [u128; N],\n    divisor: [u128; N],\n) -> ([u128; N], [u128; N]) {\n    let (quotient, remainder) = unsafe { __udiv_mod(numerator, divisor) };\n    if !std::runtime::is_unconstrained() {\n        // self / divisor = quotient rounded\n        // quotient * divisor + remainder - self = 0\n        evaluate_quadratic_expression(\n            params,\n            [[quotient]],\n            [[false]],\n            [[divisor]],\n            [[false]],\n            [numerator, remainder],\n            [true, false],\n        );\n        // we need (remainder < divisor)\n        // implies (divisor - remainder > 0)\n        validate_gt::<_, MOD_BITS>(divisor, remainder);\n    }\n    (quotient, remainder)\n}\n\n/**\n* @brief udiv_mod performs integer division between numerator, divisor\n*\n* i.e. return param is floor(numerator / divisor)\n**/\npub(crate) fn udiv<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    numerator: [u128; N],\n    divisor: [u128; N],\n) -> [u128; N] {\n    udiv_mod::<_, MOD_BITS>(params, numerator, divisor).0\n}\n\n/**\n* @brief udiv_mod performs integer modular reduction\n*\n* i.e. 1. numerator % divisor = return value\n**/\npub(crate) fn umod<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    numerator: [u128; N],\n    divisor: [u128; N],\n) -> [u128; N] {\n    udiv_mod::<_, MOD_BITS>(params, numerator, divisor).1\n}\n",
            "path": "/Users/himank/nargo/github.com/noir-lang/noir-bignum/v0.6.0/src/fns/constrained_ops.nr"
        },
        "103": {
            "source": "use crate::utils::split_bits;\n\nuse crate::constants::{TWO_POW_120, TWO_POW_126, TWO_POW_246};\nuse crate::fns::{\n    constrained_ops::validate_quotient_in_range, unconstrained_helpers::__barrett_reduction,\n};\nuse crate::params::BigNumParams as P;\n\n/**\n* @brief Given a degree-2 BigNum expression that is equal to 0 mod p, compute the quotient and borrow flags \n* @description The expression is of the form:\n*\n* \\sum_{i=0}^{NUM_PRODUCTS - 1} ((\\sum_{j=0}^{LHS_N-1}lhs[i][j]) * (\\sum_{j=0}^{RHS_N-1}rhs[i][j])) + \\sum_{i=0}^{ADD_N - 1}linear_terms[i] = quotient * modulus\n*\n* The intent is to capture an arbitrary degree-2 expression within the limitations of Noir (no efficient dynamically-sized vectors)\n*\n* When performing BigNum arithmetic, we want to represent desired BigNum operations in a way that minimizes the number of modular reductions that are required.\n* This can be achieved by minimizing the number of degree-2 relations required.\n*\n* The borrow flags describe whether individual Field limbs will underflow when evaluating the above relation.\n* For example, when computing the product a * b - q * p = 0, it is possible that:\n*      1. a[0]*b[0] - p[0]*q[0] = -2^{120}\n*      2. a[0]*b[1] + a[1]*b[0] - p[0]*q[1] - p[1]*q[0] = 1\n* In the above example, the value represented by these two limbs is zero despite each limb being nonzero.\n* In this case, to correctly constrain the result, we must add (at least) 2^{120} from the first limb and subtract 1 from the second.\n*\n* @param lhs_terms a 2D array of BigNum\n* @param lhs_flags a 2D array of sign flags\n* @param rhs_terms a 2D array of BigNum\n* @param rhs_flags a 2D array of sign flags\n* @param linear_terms an array of BigNum\n* @param linear_flags an array of sign flags\n**/\n\nunconstrained fn __compute_quadratic_expression_with_borrow_flags<let N: u32, let MOD_BITS: u32, let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n    params: P<N, MOD_BITS>,\n    lhs_terms: [[[u128; N]; LHS_N]; NUM_PRODUCTS],\n    lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n    rhs_terms: [[[u128; N]; RHS_N]; NUM_PRODUCTS],\n    rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n    linear_terms: [[u128; N]; ADD_N],\n    linear_flags: [bool; ADD_N],\n) -> ([u128; N], [u128; N], [Field; 2 * N]) {\n    // TODO, validate we do not overflow N2 when multiplying and N when adding\n    let mut mulout_p = __compute_quadratic_expression_product(\n        params,\n        lhs_terms,\n        lhs_flags,\n        rhs_terms,\n        rhs_flags,\n        linear_terms,\n        linear_flags,\n    );\n\n    let mut mulout_n: [Field; 2 * N] = [0; 2 * N];\n    let mut relation_result: [u128; 2 * N] = split_bits::__normalize_limbs(mulout_p, 2 * N);\n\n    let (quotient, remainder) =\n        __barrett_reduction(relation_result, params.redc_param, MOD_BITS, params.modulus);\n    assert(remainder == [0; N]);\n    for i in 0..N {\n        for j in 0..N {\n            mulout_n[i + j] += quotient[i] as Field * params.modulus[j] as Field;\n        }\n    }\n\n    // compute borrow flags from mulout_p and mulout_n\n    let mut borrow_flags: [Field; 2 * N] = [0; 2 * N];\n    let borrow_shift: Field = TWO_POW_246; // 2^{246}\n    let borrow_carry: Field = TWO_POW_126; // 2^{246 - 120} = 2^{126}\n    let downshift: Field = 1 / (TWO_POW_120 as Field);\n\n    // determine whether we need to borrow from more significant limbs.\n    // initial limb is \"simple\" comparison operation\n    // TODO: check how expensive `lt` operator is w.r.t. witness generation\n    borrow_flags[0] = mulout_p[0].lt(mulout_n[0]) as Field;\n    // we have 2N - 2 borrow flags. The number of limbs from our product computation is 2N - 1\n    // and there is nothing to borrow against for the final limb.\n    let mut hi_bits =\n        (mulout_p[0] - mulout_n[0] + (borrow_flags[0] as Field * borrow_shift)) * downshift;\n    for i in 1..(N + N - 2) {\n        // compute the contribution from limb `i-1` that gets added into limb `i`, and add into limb `i`\n        // let hi_bits = (mulout_p.get(i - 1) - mulout_n.get(i - 1) + (borrow_flags.get(i - 1) * borrow_shift))\n        //     * downshift;\n        mulout_p[i] += hi_bits;\n\n        // determine whether negative limb values are greater than positive limb values\n        let underflow: Field =\n            mulout_p[i].lt(mulout_n[i] + (borrow_flags[i - 1] * borrow_carry)) as Field;\n        borrow_flags[i] = underflow;\n\n        hi_bits = (\n            mulout_p[i] - mulout_n[i] + (borrow_flags[i] * borrow_shift)\n                - (borrow_flags[i - 1] * borrow_carry)\n        )\n            * downshift;\n    }\n\n    (quotient, remainder, borrow_flags)\n}\n\n/**\n* @brief Computes the result of a linear combination of (possibly negative) BigNum values (unconstrained)\n**/\n// NOTE: modulus2 is structured such that all limbs will be greater than 0, even when subtracting.\n// To do this, when computing `p - x`, we ensure that each limb in `p` is greater than each limb in `x`.\n// We know that, for a valid bignum element, the limbs in `x` will be <2^{120}\n// Therefore each of the limbs in `p` (except the most significant) will borrow 2^{120} from the more significant limb.\n// Finally, to ensure we do not underflow in the most significant limb, we use `2p` instead of `p`\nunconstrained fn __add_linear_expression<let N: u32, let MOD_BITS: u32, let M: u32>(\n    params: P<N, MOD_BITS>,\n    x: [[u128; N]; M],\n    flags: [bool; M],\n) -> ([u128; N]) {\n    // TODO, validate we do not overflow N2 when multiplying and N when adding\n    let mut sum: [u128; N] = [0; N];\n    // TODO: ugly! Will fail if input array is empty\n    let modulus2: [u128; N] = params.double_modulus;\n    for i in 0..M {\n        if (flags[i]) {\n            for j in 0..N {\n                sum[j] = sum[j] + (modulus2[j] as Field - x[i][j] as Field) as u128;\n                // assert(x[i][j].lt(modulus2[j]));\n            }\n        } else {\n            for j in 0..N {\n                sum[j] = sum[j] + x[i][j];\n            }\n        }\n    }\n    // problem if we normalize when used in computing quotient\n    sum\n}\n\n/**\n* @brief computes the limb products of a quadratic expression\n* @details see __compute_quadratic_expression_with_borrow_flags for full description\n**/\nunconstrained fn __compute_quadratic_expression_product<let N: u32, let MOD_BITS: u32, let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n    params: P<N, MOD_BITS>,\n    lhs_terms: [[[u128; N]; LHS_N]; NUM_PRODUCTS],\n    lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n    rhs_terms: [[[u128; N]; RHS_N]; NUM_PRODUCTS],\n    rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n    linear_terms: [[u128; N]; ADD_N],\n    linear_flags: [bool; ADD_N],\n) -> [Field; 2 * N] {\n    // TODO, validate we do not overflow N2 when multiplying and N when adding\n    let mut lhs: [[u128; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n    let mut rhs: [[u128; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n\n    for i in 0..NUM_PRODUCTS {\n        lhs[i] = __add_linear_expression(params, lhs_terms[i], lhs_flags[i]);\n        rhs[i] = __add_linear_expression(params, rhs_terms[i], rhs_flags[i]);\n    }\n\n    let add: [u128; N] = __add_linear_expression(params, linear_terms, linear_flags);\n\n    let mut mulout: [Field; 2 * N] = [0; 2 * N];\n\n    for i in 0..N {\n        for j in 0..N {\n            for k in 0..NUM_PRODUCTS {\n                mulout[i + j] += (lhs[k][i] as Field * rhs[k][j] as Field);\n            }\n        }\n        mulout[i] += add[i] as Field;\n    }\n    mulout\n}\n\n/**\n* @brief computes the quotient/remainder of a quadratic expression\n* @details see __compute_quadratic_expression_with_borrow_flags for full description\n**/\npub(crate) unconstrained fn __compute_quadratic_expression<let N: u32, let MOD_BITS: u32, let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n    params: P<N, MOD_BITS>,\n    lhs_terms: [[[u128; N]; LHS_N]; NUM_PRODUCTS],\n    lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n    rhs_terms: [[[u128; N]; RHS_N]; NUM_PRODUCTS],\n    rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n    linear_terms: [[u128; N]; ADD_N],\n    linear_flags: [bool; ADD_N],\n) -> ([u128; N], [u128; N]) {\n    // TODO, validate we do not overflow N2 when multiplying and N when adding\n    let mulout: [Field; (N * 2)] = __compute_quadratic_expression_product(\n        params,\n        lhs_terms,\n        lhs_flags,\n        rhs_terms,\n        rhs_flags,\n        linear_terms,\n        linear_flags,\n    );\n    let mut relation_result: [u128; 2 * N] = split_bits::__normalize_limbs(mulout, 2 * N);\n\n    // size 4\n    // a[3] * b[3] = a[6] = 7\n    // TODO: ugly! Will fail if input slice is empty\n    let k = MOD_BITS;\n\n    let (quotient, remainder) =\n        __barrett_reduction(relation_result, params.redc_param, k, params.modulus);\n\n    let mut q = quotient;\n    let mut r = remainder;\n    (q, r)\n}\n\n/**\n* @brief Constrain a degree-2 BigNum expression to be equal to 0 modulo self.modulus\n* @description The expression is of the form (when evaluated as an integer relation):\n*\n* \\sum_{i=0}^{NUM_PRODUCTS - 1} ((\\sum_{j=0}^{LHS_N-1}lhs[i][j]) * (\\sum_{j=0}^{RHS_N-1}rhs[i][j])) + \\sum_{i=0}^{ADD_N - 1}linear_terms[i] - quotient * modulus = 0\n*\n* The intent is to capture an arbitrary degree-2 expression within the limitations of Noir (no efficient dynamically-sized vectors)\n*\n* Note: this method requires the remainder term of the expression to be ZERO\n* When performing BigNum arithmetic, we want to represent desired BigNum operations in a way that minimizes the number of modular reductions that are required.\n* This can be achieved by minimizing the number of degree-2 relations required.\n*\n* The expensive parts of this algorithm are the following:\n*      1. evaluating the limb products required to compute `lhs * rhs`\n*      2. applying range constraints to validate the result is 0\n*\n* Range constraints are needed for the following reason:\n* When evaluating the above expression over N-limb BigNum objects, the result will consist of 2N - 1 limbs.\n* Each limb will be in the range [0, ..., 2^{240 + twiddle_factor} - 1] (twiddle_factor needs to be less than 6).\n* Because of the subtractions, the limbs may underflow and represent NEGATIVE values.\n* To account for this, we allow the Prover to borrow values from more significant limbs and add them into less significant limbs\n* (explicitly, we can borrow 2^{126} from limb `i + 1` to add `2^{246}` into `i`).\n* To ensure this has been done correctly, we validate that the borrow-adjusted limbs are all-zero for the first 120 bits.\n* We do *this* by multiplying the borrow-adjusted limbs by 1 / 2^{120} modulo CircutModulus, and we validate the result is in the range [0, ..., 2^{126} - 1].\n* TODO: explain why this check works. It's statistically sound but not perfectly sound. Chance of the check failing is ~1 in 2^{120}\n* I believe this is the most efficient way of performing the zero-check for this relation as it only requires `2N - 2` 126-bit range checks.\n* TODO: explain why we apply a 126-bit range check, this feels like a magic number\n* (it is. we could go higher, up to the number of bits in the CircuitModulus - 121, but 126 *should be* sufficient and is much cheaper)\n* TODO: apply checks in this method to validate twiddle_factor does not exceed 6\n* \n* @param lhs_terms a 2D array of BigNum\n* @param lhs_flags a 2D array of sign flags\n* @param rhs_terms a 2D array of BigNum\n* @param rhs_flags a 2D array of sign flags\n* @param linear_terms an array of BigNum\n* @param linear_flags an array of sign flags\n**/\npub(crate) fn evaluate_quadratic_expression<let N: u32, let MOD_BITS: u32, let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n    params: P<N, MOD_BITS>,\n    lhs_terms: [[[u128; N]; LHS_N]; NUM_PRODUCTS],\n    lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n    rhs_terms: [[[u128; N]; RHS_N]; NUM_PRODUCTS],\n    rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n    linear_terms: [[u128; N]; ADD_N],\n    linear_flags: [bool; ADD_N],\n) {\n    // use an unconstrained function to compute the value of the quotient\n    let (quotient, _, borrow_flags): ([u128; N], [u128; N], [Field; 2 * N]) = unsafe {\n        __compute_quadratic_expression_with_borrow_flags::<_, MOD_BITS, _, _, _, _>(\n            params,\n            lhs_terms,\n            lhs_flags,\n            rhs_terms,\n            rhs_flags,\n            linear_terms,\n            linear_flags,\n        )\n    };\n\n    // constrain the quotient to be in the range [0, ..., 2^{m} - 1], where `m` is log2(modulus) rounded up.\n    // Additionally, validate quotient limbs are also in the range [0, ..., 2^{120} - 1]\n    validate_quotient_in_range::<_, MOD_BITS>(quotient);\n    // TODO, validate we do not overflow N2 when multiplying and N when adding\n    // (should be a compile-time check...unconstrained function?)\n    // Compute the linear sums that represent lhs_1, rhs_1, lhs_2, rhs_2, add\n    let mut t0: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n    let mut t1: [[Field; N]; NUM_PRODUCTS] = [[0; N]; NUM_PRODUCTS];\n    let mut t4: [Field; N] = [0; N];\n\n    // TODO: this is super nasty as it requires a multiplication\n    let double_modulus: [u128; N] = params.double_modulus;\n\n    for k in 0..NUM_PRODUCTS {\n        for i in 0..N {\n            for j in 0..LHS_N {\n                // note: if is_negative is not known at comptime this is very expensive\n                if (lhs_flags[k][j]) {\n                    t0[k][i] -= lhs_terms[k][j][i] as Field;\n                    t0[k][i] += double_modulus[i] as Field;\n                } else {\n                    t0[k][i] += lhs_terms[k][j][i] as Field;\n                }\n            }\n            for j in 0..RHS_N {\n                if (rhs_flags[k][j]) {\n                    t1[k][i] -= rhs_terms[k][j][i] as Field;\n                    t1[k][i] += double_modulus[i] as Field;\n                } else {\n                    t1[k][i] += rhs_terms[k][j][i] as Field;\n                }\n            }\n        }\n    }\n    for i in 0..N {\n        for j in 0..ADD_N {\n            if (linear_flags[j]) {\n                t4[i] -= linear_terms[j][i] as Field;\n                t4[i] += double_modulus[i] as Field;\n            } else {\n                t4[i] += linear_terms[j][i] as Field;\n            }\n        }\n    }\n\n    // We want to evaluate that t0 * t1 + t2 * t3 + t4 - Quotient * Modulus = 0, evaluated over the integers\n    // For this we need to be able to borrow values from more-significant limbs into less-significant limbs,\n    // so that we can ensure that no limbs will underflow for an honest Prover\n    let mut product_limbs: [Field; 2 * N] = [0; 2 * N];\n\n    // Compute the product t0 * t1 + t2 * t3 + t4 - Quotient * Modulus\n    // TODO: this is super nasty as it requires a multiplication\n    for i in 0..N {\n        for j in 0..N {\n            for k in 0..NUM_PRODUCTS {\n                if k == 0 {\n                    let new_term =\n                        t0[k][i] * t1[k][j] - quotient[i] as Field * params.modulus[j] as Field;\n                    std::as_witness(new_term); // width-4 optimization (n.b. might not be optimal if t2, t3 input arrays are nonzero)\n                    product_limbs[i + j] += new_term;\n                } else {\n                    product_limbs[i + j] += t0[k][i] * t1[k][j] as Field;\n                }\n            }\n            if (NUM_PRODUCTS == 0) {\n                product_limbs[i + j] -= quotient[i] as Field * params.modulus[j] as Field;\n            }\n        }\n        product_limbs[i] += t4[i];\n    }\n\n    // each limb product represents the sum of 120-bit products.\n    // by setting the borrow value to 2^246 we are restricting this method's completeness to expressions\n    // where no more than 64 limb products are summed together.\n    // TODO: check in unconstrained function that this condition is satisfied\n    // TODO: define trade-offs regarding the value of borrow_shift\n    // (the larger the value, the greater the range check that is required on product_limbs)\n    // (126-bit range check is a sweet spot for the barretenberg backend as it decomposes into 9 14-bit range checks)\n    // (the barretenberg backend can evaluate these in 5.25 gates. 127 bits costs 6.5 gates)\n    let borrow_shift: Field = 0x40000000000000000000000000000000000000000000000000000000000000; // 2^{246}\n    let borrow_carry: Field = 0x40000000000000000000000000000000; // 2^{246 - 120} = 2^{126}\n    // N.B. borrow_flags is `Field` type because making it `bool` would apply boolean constraints to all `N2` array entries.\n    //      We only use `N2 - 2` borrow flags so applying 1-bit range checks on the array elements we use is more efficient.\n    // TODO: Once it is possible to perform arithmetic on generics we can use `borrow_flags: [bool;N+N-2]` to avoid this issue\n    borrow_flags[0].assert_max_bit_size::<1>();\n    product_limbs[0] += borrow_flags[0] * borrow_shift;\n    for i in 1..(N + N - 2) {\n        borrow_flags[i].assert_max_bit_size::<1>();\n        product_limbs[i] += (borrow_flags[i] * borrow_shift - borrow_flags[i - 1] * borrow_carry);\n    }\n    product_limbs[N + N - 2] -= borrow_flags[N + N - 3] as Field * borrow_carry;\n\n    // Final step: Validate `product_limbs` represents the integer value `0`\n    // Each element `i` in `product_limbs` overlaps in bitrange with element `i+1`, EXCEPT for the low 120 bits\n    // i.e. we need to do the following for each limb `i`:\n    //      1. validate the limb's low-120 bits equals zero\n    //      2. compute the limb \"carry\" by right-shifting by 2^{120}\n    //      3. add the carry into limb `i+1`\n    // We can efficiently do all of the above by multiplying the limb by 2^{-120} and constraining the result to be <2^{126}\n    // (if the low 120 bits are nonzero the result will underflow and product a large value that cannot be range constrained)\n    // (the probability of an underflow value satisfying a 126-bit range constraint is approx. 2^{k - 126},\n    //  where k is the number of bits in the prime field)\n    // We then add the result into the next limb and repeat.\n    let hi_shift: Field = 0x1000000000000000000000000000000;\n    let hi_downshift: Field = 1 / hi_shift;\n    for i in 0..N + N - 2 {\n        product_limbs[i] *= hi_downshift;\n        std::as_witness(product_limbs[i]);\n        product_limbs[i].assert_max_bit_size::<126>(); // N.B. is this sufficient? going beyond 126 costs us 1 gate per limb\n        product_limbs[i + 1] += product_limbs[i];\n    }\n    // the most significant limb has no limb to \"carry\" values into - the entire limb must equal zero\n    assert(product_limbs[N + N - 2] == 0);\n}\n",
            "path": "/Users/himank/nargo/github.com/noir-lang/noir-bignum/v0.6.0/src/fns/expressions.nr"
        },
        "105": {
            "source": "/**\n* @brief construct a BigNum instance out of an array of bytes in BIG ENDIAN format\n* @description: each 120-bit limb represents 15 bytes, we require that the size of the byte array\n*               is precisely large enough to cover MOD_BITS\n* @param x: input byte array\n**/\npub(crate) fn from_be_bytes<let N: u32, let MOD_BITS: u32, let NBytes: u32>(\n    x: [u8; NBytes],\n) -> [u128; N] {\n    let num_bits = NBytes * 8;\n    assert(num_bits >= MOD_BITS);\n    assert(num_bits - MOD_BITS < 8);\n    let mut result: [u128; N] = [0; N];\n\n    let excess_bytes = N * 15 - NBytes;\n    let final_limb_bytes = 15 - excess_bytes;\n    let mut limb: u128 = 0;\n    let mut k = 0;\n    for _j in 0..final_limb_bytes {\n        limb *= 256;\n        limb += x[k] as u128;\n        k += 1;\n    }\n    result[N - 1] = limb;\n\n    for i in 1..N {\n        let mut limb: u128 = 0;\n        for _j in 0..15 {\n            limb *= 256;\n            limb += x[k] as u128;\n            k += 1;\n        }\n        result[N - i - 1] = limb;\n    }\n\n    let most_significant_byte: Field = x[0] as Field;\n\n    most_significant_byte.assert_max_bit_size::<8 - (NBytes * 8 - MOD_BITS)>();\n    result\n}\n\npub(crate) fn to_le_bytes<let N: u32, let MOD_BITS: u32, let NBytes: u32>(\n    val: [u128; N],\n) -> [u8; NBytes] {\n    let nbytes = (MOD_BITS / 8) + (MOD_BITS % 8 != 0) as u32;\n    assert(nbytes <= NBytes);\n\n    let mut result: [u8; NBytes] = [0; NBytes];\n    for i in 0..N - 1 {\n        let limb_bytes: [u8; 15] = (val[i] as Field).to_le_bytes();\n        for j in 0..15 {\n            result[i * 15 + j] = limb_bytes[j];\n        }\n    }\n    let last_limb_bytes: [u8; 15] = (val[N - 1] as Field).to_le_bytes();\n    let num_last_bytes = (NBytes - (N - 1) * 15);\n    for i in 0..num_last_bytes {\n        result[(N - 1) * 15 + i] = last_limb_bytes[i];\n    }\n    result\n}\n",
            "path": "/Users/himank/nargo/github.com/noir-lang/noir-bignum/v0.6.0/src/fns/serialization.nr"
        },
        "106": {
            "source": "use crate::constants::{TWO_POW_119, TWO_POW_120, TWO_POW_60};\nuse crate::fns::unconstrained_ops::{__add, __gte, __mul, __neg, __one, __pow};\nuse crate::params::BigNumParams as P;\nuse crate::utils::msb::get_msb64;\nuse crate::utils::split_bits::__normalize_limbs;\n\npub(crate) unconstrained fn __from_field<let N: u32>(field: Field) -> [u128; N] {\n    let mut x = field;\n    let x_first_u128 = (x as u128);\n    let first: u128 = x_first_u128 % TWO_POW_120;\n    // this becomes the same as a integer division because we're removing the remainder\n    x = (x - (first as Field)) / (TWO_POW_120 as Field);\n    let x_second_u128 = (x as u128);\n    let second = x_second_u128 % TWO_POW_120;\n    x = (x - (second as Field)) / (TWO_POW_120 as Field);\n    let x_third_u128 = (x as u128);\n    let third = x_third_u128 % TWO_POW_120;\n    let mut result: [u128; N] = [0; N];\n    if N > 2 {\n        result[0] = first;\n        result[1] = second;\n        result[2] = third;\n    }\n    if N == 2 {\n        result[0] = first;\n        result[1] = second;\n    }\n    if N == 1 {\n        result[0] = first;\n    }\n    result\n}\n\npub(crate) unconstrained fn __validate_in_field_compute_borrow_flags<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [u128; N],\n) -> [bool; N] {\n    let mut flags: [bool; N] = [false; N];\n    let modulus: [u128; N] = params.modulus;\n    flags[0] = modulus[0] < val[0];\n    for i in 1..N - 1 {\n        flags[i] = modulus[i] < val[i] + flags[i - 1] as u128;\n    }\n    flags\n}\n\npub(crate) unconstrained fn __validate_gt_remainder<let N: u32>(\n    lhs: [u128; N],\n    rhs: [u128; N],\n) -> ([u128; N], [bool; N], [bool; N]) {\n    let mut a = lhs;\n    let mut b = rhs;\n    let underflow = !__gte(lhs, rhs);\n    assert(underflow == false, \"BigNum::validate_gt check fails\");\n    let mut result: [u128; N] = [0; N];\n\n    let mut carry_in: u128 = 0;\n    let mut borrow_in: u128 = 1;\n    let mut borrow_flags: [bool; N] = [false; N];\n    let mut carry_flags: [bool; N] = [false; N];\n    for i in 0..N {\n        let mut add_term: u128 = a[i] + carry_in;\n        let mut carry = (add_term as u128 >= TWO_POW_120) as u128;\n        add_term -= carry * TWO_POW_120;\n        carry_in = carry;\n\n        let sub_term = b[i] + borrow_in;\n        let mut borrow = (sub_term > add_term) as u128;\n        result[i] = (borrow * TWO_POW_120 + add_term - sub_term);\n\n        borrow_in = borrow;\n\n        // Only set `borrow` and `carry` if they differ\n        if (carry != borrow) {\n            carry_flags[i] = carry as bool;\n            borrow_flags[i] = borrow as bool;\n        }\n    }\n\n    (result, carry_flags, borrow_flags)\n}\n\npub(crate) unconstrained fn __neg_with_flags<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [u128; N],\n) -> ([u128; N], [bool; N]) {\n    let mut result: [u128; N] = [0; N];\n    let mut borrow_in: u128 = 0;\n\n    let mut borrow_flags: [bool; N] = [false; N];\n    for i in 0..N {\n        let sub_term = val[i] + borrow_in;\n        let borrow = (sub_term > params.modulus[i]) as u128;\n        result[i] = borrow * TWO_POW_120 + params.modulus[i] - sub_term;\n\n        borrow_in = borrow;\n        borrow_flags[i] = borrow as bool;\n    }\n    (result, borrow_flags)\n}\n\npub(crate) unconstrained fn __add_with_flags<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [u128; N],\n    rhs: [u128; N],\n) -> ([u128; N], [bool; N], [bool; N], bool) {\n    let add_res = __helper_add(lhs, rhs);\n    let overflow = __gte(add_res, params.modulus);\n\n    let mut subtrahend: [u128; N] = [0; N];\n    let mut result: [u128; N] = [0; N];\n\n    if overflow {\n        subtrahend = params.modulus;\n    }\n\n    let mut carry_in: u128 = 0;\n    let mut borrow_in: u128 = 0;\n    let mut borrow_flags: [bool; N] = [false; N];\n    let mut carry_flags: [bool; N] = [false; N];\n    for i in 0..N {\n        let mut add_term = lhs[i] + rhs[i] + carry_in;\n        let mut carry = (add_term as u128 >= TWO_POW_120) as u128;\n        add_term -= carry * TWO_POW_120;\n        carry_in = carry as u128;\n\n        let sub_term = subtrahend[i] + borrow_in;\n\n        let mut borrow: u128 = (sub_term > add_term) as u128;\n        result[i] = borrow * TWO_POW_120 + add_term - sub_term;\n        borrow_in = borrow as u128;\n\n        // Only set `borrow` and `carry` if they differ\n        if (carry != borrow) {\n            carry_flags[i] = carry as bool;\n            borrow_flags[i] = borrow as bool;\n        }\n    }\n    (result, carry_flags, borrow_flags, overflow)\n}\n\npub(crate) unconstrained fn __sub_with_flags<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [u128; N],\n    rhs: [u128; N],\n) -> ([u128; N], [bool; N], [bool; N], bool) {\n    let mut one: [u128; N] = [0; N];\n    one[0] = 1;\n    let underflow = !__gte(lhs, rhs);\n    let addend: [u128; N] = if underflow { params.modulus } else { [0; N] };\n    let mut result: [u128; N] = [0; N];\n\n    let mut carry_in: u128 = 0;\n    let mut borrow_in: u128 = 0;\n    let mut borrow_flags: [bool; N] = [false; N];\n    let mut carry_flags: [bool; N] = [false; N];\n    for i in 0..N {\n        let mut add_term: u128 = lhs[i] + addend[i] + carry_in;\n        let mut carry = (add_term as u128 >= TWO_POW_120) as u128;\n        add_term -= carry * TWO_POW_120;\n        carry_in = carry;\n\n        let sub_term = rhs[i] + borrow_in;\n        let mut borrow = (sub_term > add_term) as u128;\n        result[i] = borrow as u128 * TWO_POW_120 + add_term - sub_term;\n        borrow_in = borrow;\n\n        // Only set `borrow` and `carry` if they differ\n        if (carry != borrow) {\n            carry_flags[i] = carry as bool;\n            borrow_flags[i] = borrow as bool;\n        }\n    }\n    (result, carry_flags, borrow_flags, underflow)\n}\n\n/**\n * @brief BARRETT_REDUCTION_OVERFLOW_BITS defines how large an input to barrett reduction can be\n * @details maximum value = modulus^2 <<BARRETT_REDUCTION_OVERFLOW_BITS\n *          see __barrett_reduction for more details\n **/\ncomptime global BARRETT_REDUCTION_OVERFLOW_BITS: u32 = 4;\n\npub(crate) unconstrained fn __barrett_reduction<let N: u32>(\n    x: [u128; 2 * N],\n    redc_param: [u128; N],\n    k: u32,\n    modulus: [u128; N],\n) -> ([u128; N], [u128; N]) {\n    let mut mulout_field: [Field; 3 * N] = [0; 3 * N];\n    for i in 0..(N + N) {\n        for j in 0..N {\n            mulout_field[i + j] += x[i] as Field * redc_param[j] as Field;\n        }\n    }\n\n    let mulout: [u128; 3 * N] = __normalize_limbs(mulout_field, 3 * N - 1);\n\n    // When we apply the barrett reduction, the maximum value of the output will be\n    // <= p * (1 + x/2^{2k})\n    // where p = modulus,\n    //       x = reduction input\n    // if x > p * p, we need k to be larger than modulus_bits()\n    // we hardcode k = 4, which means that the maximum value of x is approx. 16 * p * p\n    // this should be larger than most values put into `evaluate_quadratic_expression`\n    // TODO: try and detect cases where x might be too large at comptime\n    // N.B. BARRETT_REDUCTION_OVERFLOW_BITS affects how `redc_param` is generated.\n    // `redc_param` = 2^{modulus_bits() * 2 + BARRETT_REDUCTION_OVERFLOW_BITS} / modulus\n    // NOTE: very niche edge case error that we need to be aware of:\n    //       N must be large enough to cover the modulus *plus* BARRETT_REDUCTION_OVERFLOW_BITS\n    //       i.e. a 359-bit prime needs (I think) 4 limbs to represent or we may overflow when calling __barrett_reduction\n    let mut quotient = __shr(mulout, (k + k + BARRETT_REDUCTION_OVERFLOW_BITS));\n    // the quotient has bunch of zero limbs now, so we can just take the first N limbs as a result\n    let mut smaller_quotient = [0; N];\n    for i in 0..N {\n        smaller_quotient[i] = quotient[i] as u128;\n    }\n\n    // N.B. we assume that the shifted quotient cannot exceed 2 times original bit size.\n    //      (partial_quotient_full should be just slightly larger than the modulus, we could probably represent with a size N+1 array)\n    let partial_quotient_full: [Field; 3 * N] = __into_field_array(quotient);\n\n    // quotient_mul_modulus_normalized can never exceed input value `x` so can fit into size-2 array\n    let mut quotient_mul_modulus_normalized: [Field; 2 * N] = [0; 2 * N];\n\n    // First, accumulate the products into quotient_mul_modulus_normalized\n    for j in 0..N {\n        for i in 0..(N + N - j) {\n            quotient_mul_modulus_normalized[i + j] +=\n                partial_quotient_full[i] * modulus[j] as Field;\n        }\n    }\n\n    // Then, split the accumulated values and propagate higher bits\n    let long_quotient_mul_modulus_normalized: [u128; 2 * N] =\n        __normalize_limbs(quotient_mul_modulus_normalized, 2 * N);\n    let mut quotient_mul_modulus_normalized: [u128; N] = [0; N];\n    for i in 0..N {\n        quotient_mul_modulus_normalized[i] = long_quotient_mul_modulus_normalized[i];\n    }\n\n    let mut long_remainder = __helper_sub(x, long_quotient_mul_modulus_normalized);\n    // ugly but have to remove a bunch of zeros from this\n    let mut remainder = [0; N];\n    for i in 0..N {\n        remainder[i] = long_remainder[i];\n    }\n    // barrett reduction is quirky so might need to remove a few modulus from the remainder\n    if (__gte(remainder, modulus)) {\n        remainder = __helper_sub(remainder, modulus);\n        smaller_quotient = __increment(smaller_quotient);\n    }\n    if (__gte(remainder, modulus)) {\n        remainder = __helper_sub(remainder, modulus);\n        smaller_quotient = __increment(smaller_quotient);\n    }\n    if (__gte(remainder, modulus)) {\n        remainder = __helper_sub(remainder, modulus);\n        smaller_quotient = __increment(smaller_quotient);\n    }\n\n    (smaller_quotient, remainder)\n}\n\n/**\n* @brief compute the log of the size of the primitive root\n* @details find the maximum value k where x^k = 1, where x = primitive root\n*          This is needed for our Tonelli-Shanks sqrt algorithm\n**/\npub(crate) unconstrained fn __primitive_root_log_size<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n) -> u32 {\n    let mut one: [u128; N] = [0; N];\n    one[0] = 1;\n    let mut target = __helper_sub(params.modulus, one);\n    let mut result: u32 = 0;\n    for _ in 0..MOD_BITS {\n        let lsb_is_one = (target[0] & 1) == 1;\n        if (lsb_is_one) {\n            break;\n        }\n        result += 1;\n        target = __shr1(target);\n    }\n    result\n}\n\n/**\n* @brief inner loop fn for `find_multiplive_generator`\n* @details recursive function to get around the lack of a `while` keyword\n**/\nunconstrained fn __recursively_find_multiplicative_generator<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    target: [u128; N],\n    p_minus_one_over_two: [u128; N],\n) -> (bool, [u128; N]) {\n    let exped = __pow(params, target, p_minus_one_over_two);\n    let one: [u128; N] = __one();\n    let neg_one = __neg(params, one);\n    let found = exped == neg_one;\n    let mut result: (bool, [u128; N]) = (found, target);\n    if (!found) {\n        let _target: [u128; N] = __add(params, target, one);\n        result = __recursively_find_multiplicative_generator::<_, MOD_BITS>(\n            params,\n            _target,\n            p_minus_one_over_two,\n        );\n    }\n    result\n}\n\n/**\n* @brief find multiplicative generator `g` where `g` is the smallest value that is not a quadratic residue\n*        i.e. smallest g where g^2 = -1\n* @note WARNING if multiplicative generator does not exist, this function will enter an infinite loop!\n**/\npub(crate) unconstrained fn __multiplicative_generator<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n) -> [u128; N] {\n    let mut target: [u128; N] = __one();\n    let p_minus_one_over_two = __shr1(__helper_sub(params.modulus, __one()));\n    let (_, target) = __recursively_find_multiplicative_generator::<_, MOD_BITS>(\n        params,\n        target,\n        p_minus_one_over_two,\n    );\n    target\n}\n\npub(crate) unconstrained fn __tonelli_shanks_sqrt_inner_loop_check<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    t2m: [u128; N],\n    i: u32,\n) -> u32 {\n    let one: [u128; N] = __one();\n    let is_one = t2m == one;\n    let mut result = i;\n    if (!is_one) {\n        let t2m = __mul::<_, MOD_BITS>(params, t2m, t2m);\n        let i = i + 1;\n        result = __tonelli_shanks_sqrt_inner_loop_check::<_, MOD_BITS>(params, t2m, i);\n    }\n    result\n}\n\npub(crate) unconstrained fn __increment<let N: u32>(val: [u128; N]) -> [u128; N] {\n    let mut result: [u128; N] = [0; N];\n    let mut carry: u128 = 1;\n    for i in 0..N {\n        let mut add_term = (val[i] + carry);\n        carry = add_term >> 120;\n        add_term = add_term - (carry << 120);\n        result[i] = add_term;\n    }\n    result\n}\n\npub(crate) unconstrained fn __shr<let N: u32>(input: [u128; N], shift: u32) -> [u128; N] {\n    let mut result: [u128; N] = [0; N];\n\n    let num_shifted_limbs = shift / 120;\n    let limb_shift = (shift % 120) as u8;\n    let remainder_shift = (120 - limb_shift) as u8;\n    let mask: u128 = (((1 as u128) << limb_shift) - 1) << remainder_shift;\n    result[0] = (input[0 + num_shifted_limbs] >> limb_shift);\n    for i in 1..(N - num_shifted_limbs) {\n        let value = input[i + num_shifted_limbs];\n        result[i] = value >> limb_shift;\n        let remainder: u128 = (value << remainder_shift) & mask;\n        result[i - 1] = result[i - 1] + remainder;\n    }\n    result\n}\n\npub(crate) unconstrained fn __shl<let N: u32>(input: [u128; N], shift: u32) -> [u128; N] {\n    let mut result: [u128; N] = [0; N];\n\n    let num_shifted_limbs = shift / 120;\n    let limb_shift = (shift % 120) as u8;\n    let remainder_shift: u8 = 120 - limb_shift as u8;\n\n    // 83\n    // limb shift = 1\n    // inside shift = 19 bits to the left\n    // meaning we have 19 carry bits and 41 remainder bits\n    let mask: u128 = (1 as u128 << 120) - 1;\n    //   let mask: u64 = (((1 as u64) << limb_shift as u8) - 1) << remainder_shift as u8;\n    let value = input[0];\n\n    let mut remainder = (value >> remainder_shift);\n    result[num_shifted_limbs] = (value << limb_shift) & mask;\n\n    // shift 84. num shifted = 1\n    for i in 1..((N) - num_shifted_limbs) {\n        let value = input[i];\n        let upshift = ((value << limb_shift) + remainder) & mask;\n        result[i + num_shifted_limbs] = upshift;\n        remainder = (value >> remainder_shift);\n    }\n    result\n}\n\npub(crate) unconstrained fn __helper_sub<let N: u32>(lhs: [u128; N], rhs: [u128; N]) -> [u128; N] {\n    let mut result: [u128; N] = [0; N];\n    let mut borrow: u128 = 0;\n    let mut borrow_in: u128 = 0;\n    for i in 0..N {\n        borrow = ((rhs[i] + borrow_in) > lhs[i]) as u128;\n        let sub = (borrow << 120) + lhs[i] as u128 - rhs[i] as u128 - borrow_in;\n        result[i] = sub;\n        borrow_in = borrow;\n    }\n    result\n}\n\npub(crate) unconstrained fn __helper_add<let N: u32>(lhs: [u128; N], rhs: [u128; N]) -> [u128; N] {\n    let mut result: [u128; N] = [0; N];\n    let mut carry: u128 = 0;\n    for i in 0..N {\n        let mut add_term = (lhs[i] + rhs[i] + carry);\n        carry = add_term >> 120;\n        add_term = add_term - (carry << 120);\n        result[i] = add_term;\n    }\n    result\n}\n\npub(crate) unconstrained fn __shr1<let N: u32>(mut input: [u128; N]) -> [u128; N] {\n    let value = input[N - 1];\n    input[N - 1] = value >> 1;\n\n    let mut remainder = (value & 1) << 119;\n\n    for i in 1..N {\n        let value = input[N - 1 - i];\n        input[N - 1 - i] = (value >> 1) + remainder;\n        remainder = (value << 119) & TWO_POW_119;\n    }\n    input\n}\n\npub(crate) unconstrained fn __get_msb<let N: u32>(val: [u128; N]) -> u32 {\n    let mut count = 0;\n    for i in 0..N {\n        let v = val[((N) - 1 - i)];\n        let v_low = v as u64 % TWO_POW_60 as u64;\n        let v_high = ((v - v_low as u128) / TWO_POW_60) as u64;\n        if (v_high > 0) {\n            count = 60 * ((2 * N) - 1 - (i * 2)) + get_msb64(v_high);\n            break;\n        }\n        if (v_low > 0) {\n            count = 60 * ((2 * N) - 1 - (i * 2 + 1)) + get_msb64(v_low);\n            break;\n        }\n    }\n    count\n}\n\npub(crate) fn __get_bit<let N: u32>(input: [u128; N], bit: u32) -> bool {\n    let segment_index: u32 = bit / 120;\n    let uint_index = bit % 120;\n    let limb: u128 = input[segment_index];\n    let value = (limb >> uint_index as u8) & 1;\n    value == 1\n}\n\npub(crate) fn __into_field_array<let N: u32>(input: [u128; N]) -> [Field; N] {\n    let mut result: [Field; N] = [0; N];\n    for i in 0..N {\n        result[i] = input[i] as Field;\n    }\n    result\n}\n",
            "path": "/Users/himank/nargo/github.com/noir-lang/noir-bignum/v0.6.0/src/fns/unconstrained_helpers.nr"
        },
        "107": {
            "source": "use crate::fns::constrained_ops::derive_from_seed;\nuse crate::fns::unconstrained_helpers::{\n    __barrett_reduction, __get_bit, __get_msb, __helper_add, __helper_sub, __increment,\n    __multiplicative_generator, __primitive_root_log_size, __shl, __shr,\n    __tonelli_shanks_sqrt_inner_loop_check,\n};\nuse crate::params::BigNumParams as P;\nuse crate::utils::split_bits;\nuse super::unconstrained_helpers::__shr1;\n\npub(crate) unconstrained fn __one<let N: u32>() -> [u128; N] {\n    let mut limbs: [u128; N] = [0; N];\n    limbs[0] = 1;\n    limbs\n}\n\n/// Deterministically derives a big_num from a seed value.\n///\n/// Takes a seed byte array and generates a big_num in the range [0, modulus-1].\n///\n/// ## Value Parameters\n///\n/// - `params`: The BigNum parameters containing modulus and reduction info\n/// - `seed`:  Input seed bytes to derive from.\n///\n/// ## Returns\n///\n///  An array of field elements derived from the seed (the limbs of the big_num)\npub(crate) unconstrained fn __derive_from_seed<let N: u32, let MOD_BITS: u32, let SeedBytes: u32>(\n    params: P<N, MOD_BITS>,\n    seed: [u8; SeedBytes],\n) -> [u128; N] {\n    let out = derive_from_seed::<N, MOD_BITS, SeedBytes>(params, seed);\n    out\n}\n\npub(crate) unconstrained fn __eq<let N: u32>(lhs: [u128; N], rhs: [u128; N]) -> bool {\n    lhs == rhs\n}\n\npub(crate) unconstrained fn __is_zero<let N: u32>(limbs: [u128; N]) -> bool {\n    let mut result: bool = true;\n    for i in 0..N {\n        result = result & (limbs[i] == 0);\n    }\n\n    result\n}\n\n/**\n* @brief given an input `x`, compute `2p - x` (unconstrained)\n*\n* @description we subtract the input from double the modulus, because all constrained BigNum operations\n*              only guarantee that the output is in the range [0, ceil(log2(p))].\n*              I.E. the input may be larger than the modulus `p`.\n*              In order to ensure this operation does not underflow, we compute `2p - x` instead of `p - x`.\n*              N.B. constrained BigNum operations do not fully constrain outputs to be in the range [0, p-1]\n*              because such a check is expensive and usually unneccesary.\n*/\npub(crate) unconstrained fn __neg<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    limbs: [u128; N],\n) -> [u128; N] {\n    let f: [u128; N] = limbs;\n    __helper_sub(params.modulus, f)\n}\n\npub(crate) unconstrained fn __add<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [u128; N],\n    rhs: [u128; N],\n) -> [u128; N] {\n    let mut result: [u128; N] = [0; N];\n    let mut carry: u128 = 0;\n    for i in 0..N {\n        let mut add_term = (lhs[i] + rhs[i] + carry);\n        carry = add_term >> 120;\n        add_term = add_term - (carry << 120);\n        result[i] = add_term;\n    }\n    // check if the result is greater than the modulus\n    if __gte(result, params.modulus) {\n        __helper_sub(result, params.modulus)\n    } else {\n        result\n    }\n}\n\n/**\n* @brief given inputs `x, y` compute 2p + x - y (unconstrained)\n* @description see `__neg` for why we use 2p instead of p\n**/\npub(crate) unconstrained fn __sub<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [u128; N],\n    rhs: [u128; N],\n) -> [u128; N] {\n    __add(params, lhs, __neg(params, rhs))\n}\n\npub(crate) unconstrained fn __mul_with_quotient<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [u128; N],\n    rhs: [u128; N],\n) -> ([u128; N], [u128; N]) {\n    let mut mul: [Field; 2 * N] = [0; 2 * N];\n    for i in 0..N {\n        for j in 0..N {\n            mul[i + j] += (lhs[i] as Field * rhs[j] as Field);\n        }\n    }\n    let to_reduce: [u128; (N * 2)] = split_bits::__normalize_limbs(mul, 2 * N);\n    let (q, r) = __barrett_reduction(to_reduce, params.redc_param, MOD_BITS, params.modulus);\n    // ([0; N], [0; N])\n    (q, r)\n}\n\npub(crate) unconstrained fn __mul<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    lhs: [u128; N],\n    rhs: [u128; N],\n) -> [u128; N] {\n    let (_, b) = __mul_with_quotient::<_, MOD_BITS>(params, lhs, rhs);\n    b\n}\n\npub(crate) unconstrained fn __div<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    numerator: [u128; N],\n    divisor: [u128; N],\n) -> [u128; N] {\n    let inv_divisor: [u128; N] = __invmod::<_, MOD_BITS>(params, divisor);\n    __mul::<_, MOD_BITS>(params, numerator, inv_divisor)\n}\n\n/**\n* @brief __udiv_mod performs *unconstrained* integer division between numerator, divisor \n*\n* i.e. 1. floor(numerator / divisor) = quotient\n*      2. numerator % divisor = remainder\n*      3. divisor * quotient + remainder = numerator\n**/\npub(crate) unconstrained fn __udiv_mod<let N: u32>(\n    numerator: [u128; N],\n    divisor: [u128; N],\n) -> ([u128; N], [u128; N]) {\n    let mut quotient: [u128; N] = [0; N];\n    let mut remainder: [u128; N] = numerator;\n\n    let b = divisor;\n    let numerator_msb = __get_msb(numerator);\n    let divisor_msb = __get_msb(divisor);\n    if divisor_msb > numerator_msb {\n        ([0; N], numerator)\n    } else {\n        let mut bit_difference = __get_msb(remainder) - __get_msb(divisor);\n        let mut accumulator: [u128; N] = __one();\n        let mut divisor = __shl(divisor, bit_difference);\n        accumulator = __shl(accumulator, bit_difference);\n\n        if (__gte(divisor, __increment(remainder))) {\n            divisor = __shr1(divisor);\n            accumulator = __shr1(accumulator);\n        }\n\n        for _ in 0..(N * 120) {\n            if (__gte(remainder, b) == false) {\n                break;\n            }\n            // we've shunted 'divisor' up to have the same bit length as our remainder.\n            // If remainder >= divisor, then a is at least '1 << bit_difference' multiples of b\n            if (__gte(remainder, divisor)) {\n                remainder = __helper_sub(remainder, divisor);\n                // we can use OR here instead of +, as\n                // accumulator is always a nice power of two\n                quotient = __helper_add(quotient, accumulator);\n            }\n            divisor = __shr1(divisor); // >>= 1;\n            accumulator = __shr1(accumulator); //  >>= 1;\n        }\n\n        (quotient, remainder)\n    }\n}\n\npub(crate) unconstrained fn __invmod<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [u128; N],\n) -> [u128; N] {\n    let one = __one();\n    let exp = __helper_sub(params.modulus, __helper_add(one, one));\n    __pow::<_, MOD_BITS>(params, val, exp)\n}\n\npub(crate) unconstrained fn __pow<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    val: [u128; N],\n    exponent: [u128; N],\n) -> [u128; N] {\n    let x = exponent;\n    let num_bits = MOD_BITS + 1;\n\n    let mut accumulator: [u128; N] = __one::<N>();\n\n    for i in 0..num_bits {\n        accumulator = __mul::<_, MOD_BITS>(params, accumulator, accumulator);\n        if __get_bit(x, num_bits - i - 1) {\n            accumulator = __mul::<_, MOD_BITS>(params, accumulator, val);\n        }\n    }\n    accumulator\n}\n\npub(crate) unconstrained fn __batch_invert<let N: u32, let MOD_BITS: u32, let M: u32>(\n    params: P<N, MOD_BITS>,\n    x: [[u128; N]; M],\n) -> [[u128; N]; M] {\n    // TODO: ugly! Will fail if input slice is empty\n\n    let mut accumulator: [u128; N] = __one::<N>();\n    let mut temporaries: [[u128; N]; M] = std::mem::zeroed();\n\n    for i in 0..M {\n        temporaries[i] = accumulator;\n        if (!__is_zero(x[i])) {\n            accumulator = __mul::<_, MOD_BITS>(params, accumulator, x[i]);\n        }\n    }\n\n    let mut result: [[u128; N]; M] = [[0; N]; M];\n    accumulator = __invmod::<_, MOD_BITS>(params, accumulator);\n    for i in 0..M {\n        let idx = M - 1 - i;\n        if (!__is_zero(x[idx])) {\n            let T0 = __mul::<_, MOD_BITS>(params, accumulator, temporaries[idx]);\n            accumulator = __mul::<_, MOD_BITS>(params, accumulator, x[idx]);\n            result[idx] = T0;\n        }\n    }\n    result\n}\n\npub(crate) unconstrained fn __batch_invert_slice<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    x: [[u128; N]],\n) -> [[u128; N]] {\n    // TODO: ugly! Will fail if input slice is empty\n    let mut accumulator: [u128; N] = __one::<N>();\n    let mut temporaries: [[u128; N]] = &[];\n    for i in 0..x.len() {\n        temporaries = temporaries.push_back(accumulator);\n        if (!__is_zero(x[i])) {\n            accumulator = __mul::<_, MOD_BITS>(params, accumulator, x[i]);\n        }\n    }\n\n    let mut result: [[u128; N]] = [];\n    accumulator = __invmod::<_, MOD_BITS>(params, accumulator);\n    for i in 0..x.len() {\n        let idx = x.len() - 1 - i;\n        if (!__is_zero(x[idx])) {\n            let T0 = __mul::<_, MOD_BITS>(params, accumulator, temporaries[idx]);\n            accumulator = __mul::<_, MOD_BITS>(params, accumulator, x[idx]);\n            result = result.push_front(T0);\n        } else {\n            result = result.push_front([0; N]);\n        };\n    }\n\n    result\n}\n\n/**\n* @brief compute a modular square root using the Tonelli-Shanks algorithm\n* @details only use for prime fields! Function may infinite loop if used for non-prime fields\n* @note this is unconstrained fn. To constrain a square root, validate that output^2 = self\n* TODO: create fn that constrains nonexistence of square root (i.e. find x where x^2 = -self)\n**/\npub(crate) unconstrained fn __tonelli_shanks_sqrt<let N: u32, let MOD_BITS: u32>(\n    params: P<N, MOD_BITS>,\n    input: [u128; N],\n) -> std::option::Option<[u128; N]> {\n    // Tonelli-shanks algorithm begins by finding a field element Q and integer S,\n    // such that (p - 1) = Q.2^{s}\n    // We can compute the square root of a, by considering a^{(Q + 1) / 2} = R\n    // Once we have found such an R, we have\n    // R^{2} = a^{Q + 1} = a^{Q}a\n    // If a^{Q} = 1, we have found our square root.\n    // Otherwise, we have a^{Q} = t, where t is a 2^{s-1}'th root of unity.\n    // This is because t^{2^{s-1}} = a^{Q.2^{s-1}}.\n    // We know that (p - 1) = Q.w^{s}, therefore t^{2^{s-1}} = a^{(p - 1) / 2}\n    // From Euler's criterion, if a is a quadratic residue, a^{(p - 1) / 2} = 1\n    // i.e. t^{2^{s-1}} = 1\n    // To proceed with computing our square root, we want to transform t into a smaller subgroup,\n    // specifically, the (s-2)'th roots of unity.\n    // We do this by finding some value b,such that\n    // (t.b^2)^{2^{s-2}} = 1 and R' = R.b\n    // Finding such a b is trivial, because from Euler's criterion, we know that,\n    // for any quadratic non-residue z, z^{(p - 1) / 2} = -1\n    // i.e. z^{Q.2^{s-1}} = -1\n    // => z^Q is a 2^{s-1}'th root of -1\n    // => z^{Q^2} is a 2^{s-2}'th root of -1\n    // Since t^{2^{s-1}} = 1, we know that t^{2^{s - 2}} = -1\n    // => t.z^{Q^2} is a 2^{s - 2}'th root of unity.\n    // We can iteratively transform t into ever smaller subgroups, until t = 1.\n    // At each iteration, we need to find a new value for b, which we can obtain\n    // by repeatedly squaring z^{Q}\n    let one = __one();\n    let primitive_root_log_size = __primitive_root_log_size::<_, MOD_BITS>(params);\n    let Q = __shr(\n        __helper_sub(params.modulus, one),\n        primitive_root_log_size - 1,\n    );\n    let two = __helper_add(one, one);\n    let Q_minus_one_over_two = __shr(__helper_sub(Q, two), 2);\n    let mut z = __multiplicative_generator::<_, MOD_BITS>(params); // the generator is a non-residue\n    let mut b = __pow::<_, MOD_BITS>(params, input, Q_minus_one_over_two);\n    let mut r = __mul::<_, MOD_BITS>(params, input, b);\n    let mut t = __mul::<_, MOD_BITS>(params, r, b);\n    let mut check: [u128; N] = t;\n    for _ in 0..primitive_root_log_size - 1 {\n        check = __mul::<_, MOD_BITS>(params, check, check);\n    }\n    let mut result = Option::none();\n    if (__eq(check, one)) {\n        let mut t1 = __pow::<_, MOD_BITS>(params, z, Q_minus_one_over_two);\n        let mut t2 = __mul::<_, MOD_BITS>(params, t1, z);\n        let mut c = __mul::<_, MOD_BITS>(params, t2, t1);\n        let mut m: u32 = primitive_root_log_size;\n        // tonelli shanks inner 1\n        // (if t2m == 1) then skip\n        // else increase i and square t2m and go again\n        // algorithm runtime should only be max the number of bits in modulus\n        for _ in 0..MOD_BITS {\n            if (__eq(t, one)) {\n                result = Option::some(r);\n                break;\n            }\n            let mut t2m = t;\n            // while loop time\n            let i = __tonelli_shanks_sqrt_inner_loop_check::<_, MOD_BITS>(params, t2m, 0);\n            let mut j = m - i - 1;\n            b = c;\n            for _ in 0..j {\n                // how big\n                if (j == 0) {\n                    break;\n                }\n                b = __mul(params, b, b);\n                //j -= 1;\n            }\n            c = __mul::<_, MOD_BITS>(params, b, b);\n            t = __mul::<_, MOD_BITS>(params, t, c);\n            r = __mul::<_, MOD_BITS>(params, r, b);\n            m = i;\n        }\n    }\n    result\n}\n\npub(crate) unconstrained fn __gte<let N: u32, let MOD_BITS: u32>(\n    lhs: [u128; N],\n    rhs: [u128; N],\n) -> bool {\n    let mut result = false;\n    let mut early_exit = false;\n    for i in 0..(N) {\n        let idx = (N) - 1 - i;\n        if (rhs[idx] == lhs[idx]) {\n            continue;\n        }\n\n        result = rhs[idx] < lhs[idx];\n        early_exit = true;\n        break;\n    }\n    if early_exit {\n        result\n    } else {\n        lhs[0] == rhs[0]\n    }\n}\n",
            "path": "/Users/himank/nargo/github.com/noir-lang/noir-bignum/v0.6.0/src/fns/unconstrained_ops.nr"
        },
        "109": {
            "source": "pub struct BigNumParams<let N: u32, let MOD_BITS: u32> {\n    pub has_multiplicative_inverse: bool,\n\n    // @brief modulus: all BigNum operations are evaluated modulo this value\n    pub modulus: [u128; N],\n\n    // @brief double_modulus: used when performing negations and subtractions\n    // @note we borrow 1 from the last limb. This is for easing up the operations that might underflow\n    pub double_modulus: [u128; N],\n\n    // @brief redc_param used for __barrett_reduction. See https://en.wikipedia.org/wiki/Barrett_reduction\n    pub redc_param: [u128; N],\n}\n\n// To be implemented by the user for any BigNum they define, or within the predefined BigNums in the `fields/` dir.\npub trait BigNumParamsGetter<let N: u32, let MOD_BITS: u32> {\n    fn get_params() -> BigNumParams<N, MOD_BITS>;\n}\n\nimpl<let N: u32, let MOD_BITS: u32> BigNumParams<N, MOD_BITS> {\n    pub fn new(\n        has_multiplicative_inverse: bool,\n        modulus: [u128; N],\n        redc_param: [u128; N],\n    ) -> Self {\n        Self {\n            has_multiplicative_inverse,\n            modulus,\n            double_modulus: get_double_modulus(modulus),\n            redc_param,\n        }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::cmp::Eq for BigNumParams<N, MOD_BITS> {\n    fn eq(self, other: Self) -> bool {\n        (self.has_multiplicative_inverse == other.has_multiplicative_inverse)\n            & (self.modulus == other.modulus)\n            & (self.double_modulus == other.double_modulus)\n            & (self.redc_param == other.redc_param)\n    }\n}\n\nfn get_double_modulus<let N: u32>(modulus: [u128; N]) -> [u128; N] {\n    let TWO_POW_120: u128 = 0x1000000000000000000000000000000;\n    let mut result: [u128; N] = [0; N];\n    let mut carry: u128 = 0;\n    for i in 0..N {\n        let mut add_term = (modulus[i] + modulus[i] + carry);\n        carry = add_term >> 120;\n        add_term = add_term - (carry << 120);\n        result[i] = add_term;\n    }\n\n    result[0] += TWO_POW_120;\n    for i in 1..N - 1 {\n        result[i] += (TWO_POW_120 - 1);\n    }\n    result[N - 1] -= 1;\n    result\n}\n",
            "path": "/Users/himank/nargo/github.com/noir-lang/noir-bignum/v0.6.0/src/params.nr"
        },
        "110": {
            "source": "use crate::params::BigNumParams;\nuse crate::utils::map::map;\n\nuse crate::fns::{\n    constrained_ops::{\n        add, assert_is_not_equal, conditional_select, derive_from_seed, div, eq, is_zero, mul, neg,\n        sub, udiv, udiv_mod, umod, validate_in_field, validate_in_range,\n    },\n    expressions::{__compute_quadratic_expression, evaluate_quadratic_expression},\n    serialization::{from_be_bytes, to_le_bytes},\n    unconstrained_ops::{\n        __add, __batch_invert, __batch_invert_slice, __derive_from_seed, __div, __eq, __invmod,\n        __is_zero, __mul, __neg, __pow, __sub, __tonelli_shanks_sqrt, __udiv_mod,\n    },\n};\nuse std::ops::Neg;\n\npub struct RuntimeBigNum<let N: u32, let MOD_BITS: u32> {\n    pub limbs: [u128; N],\n    pub params: BigNumParams<N, MOD_BITS>,\n}\n\n// All functions prefixed `__` are unconstrained!\n// They're not actually decorated as `unconstrained` because to return the `params` (as part of Self) from an `unconstrained` fn would cause range constraints. Instead, each `__` fn wraps a call to an unconstrained fn, so that the already-range-constrained `params` can be inserted into Self after the unconstrained call.\nimpl<let N: u32, let MOD_BITS: u32> RuntimeBigNum<N, MOD_BITS> {\n\n    pub fn zero(params: BigNumParams<N, MOD_BITS>) -> Self {\n        let limbs: [u128; N] = [0; N];\n        Self { limbs, params }\n    }\n\n    pub fn one(params: BigNumParams<N, MOD_BITS>) -> Self {\n        let mut result = RuntimeBigNum::zero(params);\n        result.limbs[0] = 1;\n        result\n    }\n\n    pub fn derive_from_seed<let SeedBytes: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        seed: [u8; SeedBytes],\n    ) -> Self {\n        let limbs = derive_from_seed::<_, MOD_BITS, _>(params, seed);\n        Self { limbs, params }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    pub unconstrained fn __derive_from_seed<let SeedBytes: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        seed: [u8; SeedBytes],\n    ) -> Self {\n        let limbs = __derive_from_seed::<_, MOD_BITS, _>(params, seed);\n        Self { limbs, params }\n    }\n\n    pub fn from_slice(params: BigNumParams<N, MOD_BITS>, limbs: [u128]) -> Self {\n        Self { limbs: limbs.as_array(), params }\n    }\n\n    pub fn from_array(params: BigNumParams<N, MOD_BITS>, limbs: [u128; N]) -> Self {\n        Self { limbs, params }\n    }\n\n    pub fn from_be_bytes<let NBytes: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        x: [u8; NBytes],\n    ) -> Self {\n        Self { limbs: from_be_bytes::<_, MOD_BITS, _>(x), params }\n    }\n\n    pub fn to_le_bytes<let NBytes: u32>(self) -> [u8; NBytes] {\n        to_le_bytes::<_, MOD_BITS, _>(self.limbs)\n    }\n\n    pub fn modulus(self) -> Self {\n        let params = self.params;\n        Self { limbs: params.modulus, params }\n    }\n\n    pub fn modulus_bits() -> u32 {\n        MOD_BITS\n    }\n\n    pub fn num_limbs() -> u32 {\n        N\n    }\n\n    // fn get(self) -> [Field] {\n    //     self.get_limbs()\n    // }\n\n    pub fn get_limbs(self) -> [u128; N] {\n        self.limbs\n    }\n\n    pub fn get_limb(self, idx: u32) -> u128 {\n        self.limbs[idx]\n    }\n\n    pub fn set_limb(&mut self, idx: u32, value: u128) {\n        self.limbs[idx] = value;\n    }\n\n    pub unconstrained fn __eq(self, other: Self) -> bool {\n        assert(self.params == other.params);\n        __eq(self.limbs, other.limbs)\n    }\n\n    pub unconstrained fn __is_zero(self) -> bool {\n        __is_zero(self.limbs)\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    pub fn __neg(self) -> Self {\n        let params = self.params;\n        let limbs = unsafe { __neg(params, self.limbs) };\n        Self { params, limbs }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    pub fn __add(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        let limbs = unsafe { __add(params, self.limbs, other.limbs) };\n        Self { params, limbs }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    pub fn __sub(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        let limbs = unsafe { __sub(params, self.limbs, other.limbs) };\n        Self { params, limbs }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    pub fn __mul(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        let limbs = unsafe { __mul::<_, MOD_BITS>(params, self.limbs, other.limbs) };\n        Self { params, limbs }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    pub fn __div(self, divisor: Self) -> Self {\n        let params = self.params;\n        assert(params == divisor.params);\n        let limbs = unsafe { __div::<_, MOD_BITS>(params, self.limbs, divisor.limbs) };\n        Self { params, limbs }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    pub fn __udiv_mod(self, divisor: Self) -> (Self, Self) {\n        let params = self.params;\n        assert(params == divisor.params);\n        let (q, r) = unsafe { __udiv_mod(self.limbs, divisor.limbs) };\n        (Self { limbs: q, params }, Self { limbs: r, params })\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    pub fn __invmod(self) -> Self {\n        let params = self.params;\n        assert(params.has_multiplicative_inverse);\n        let limbs = unsafe { __invmod::<_, MOD_BITS>(params, self.limbs) };\n        Self { limbs, params }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    pub fn __pow(self, exponent: Self) -> Self {\n        let params = self.params;\n        assert(params == exponent.params);\n        let limbs = unsafe { __pow::<_, MOD_BITS>(params, self.limbs, exponent.limbs) };\n        Self { limbs, params }\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    pub fn __batch_invert<let M: u32>(x: [Self; M]) -> [Self; M] {\n        let params = x[0].params;\n        assert(params.has_multiplicative_inverse);\n        let all_limbs =\n            unsafe { __batch_invert::<_, MOD_BITS, _>(params, x.map(|bn| Self::get_limbs(bn))) };\n        all_limbs.map(|limbs| Self { limbs, params })\n    }\n\n    // Note: can't return a slice from this unconstrained to a constrained function.\n    pub unconstrained fn __batch_invert_slice<let M: u32>(x: [Self]) -> [Self] {\n        let params = x[0].params;\n        assert(params.has_multiplicative_inverse);\n        let all_limbs = {\n            let inv_slice =\n                __batch_invert_slice::<_, MOD_BITS>(params, x.map(|bn| Self::get_limbs(bn)));\n            inv_slice.as_array()\n        };\n        all_limbs.map(|limbs| Self { limbs, params })\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    pub fn __tonelli_shanks_sqrt(self) -> std::option::Option<Self> {\n        let params = self.params;\n        let maybe_limbs = unsafe { __tonelli_shanks_sqrt(params, self.limbs) };\n        maybe_limbs.map(|limbs| Self { limbs, params })\n    }\n\n    // UNCONSTRAINED! (Hence `__` prefix).\n    pub fn __compute_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        lhs_terms: [[Self; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[Self; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [Self; ADD_N],\n        linear_flags: [bool; ADD_N],\n    ) -> (Self, Self) {\n        let (q_limbs, r_limbs) = unsafe {\n            __compute_quadratic_expression::<_, MOD_BITS, _, _, _, _>(\n                params,\n                map(lhs_terms, |bns| map(bns, |bn| Self::get_limbs(bn))),\n                lhs_flags,\n                map(rhs_terms, |bns| map(bns, |bn| Self::get_limbs(bn))),\n                rhs_flags,\n                map(linear_terms, |bn| Self::get_limbs(bn)),\n                linear_flags,\n            )\n        };\n        (Self { limbs: q_limbs, params }, Self { limbs: r_limbs, params })\n    }\n\n    pub fn evaluate_quadratic_expression<let LHS_N: u32, let RHS_N: u32, let NUM_PRODUCTS: u32, let ADD_N: u32>(\n        params: BigNumParams<N, MOD_BITS>,\n        lhs_terms: [[Self; LHS_N]; NUM_PRODUCTS],\n        lhs_flags: [[bool; LHS_N]; NUM_PRODUCTS],\n        rhs_terms: [[Self; RHS_N]; NUM_PRODUCTS],\n        rhs_flags: [[bool; RHS_N]; NUM_PRODUCTS],\n        linear_terms: [Self; ADD_N],\n        linear_flags: [bool; ADD_N],\n    ) {\n        evaluate_quadratic_expression::<_, MOD_BITS, _, _, _, _>(\n            params,\n            map(lhs_terms, |bns| map(bns, |bn| Self::get_limbs(bn))),\n            lhs_flags,\n            map(rhs_terms, |bns| map(bns, |bn| Self::get_limbs(bn))),\n            rhs_flags,\n            map(linear_terms, |bn| Self::get_limbs(bn)),\n            linear_flags,\n        )\n    }\n\n    pub fn validate_in_field(self: Self) {\n        let params = self.params;\n        validate_in_field::<_, MOD_BITS>(params, self.limbs);\n    }\n\n    pub fn validate_in_range(self) {\n        validate_in_range::<_, _, MOD_BITS>(self.limbs);\n    }\n\n    pub fn assert_is_not_equal(self, other: Self) {\n        let params = self.params;\n        assert(params == other.params);\n        assert_is_not_equal(params, self.limbs, other.limbs);\n    }\n\n    pub fn udiv_mod(self, divisor: Self) -> (Self, Self) {\n        let params = self.params;\n        assert(params == divisor.params);\n        let (q, r) = udiv_mod::<_, MOD_BITS>(params, self.limbs, divisor.limbs);\n        (Self { limbs: q, params }, Self { limbs: r, params })\n    }\n\n    pub fn udiv(self, divisor: Self) -> Self {\n        let params = self.params;\n        assert(params == divisor.params);\n        Self { limbs: udiv::<_, MOD_BITS>(params, self.limbs, divisor.limbs), params }\n    }\n\n    pub fn umod(self, divisor: Self) -> Self {\n        let params = self.params;\n        assert(params == divisor.params);\n        Self { limbs: umod::<_, MOD_BITS>(params, self.limbs, divisor.limbs), params }\n    }\n\n    pub fn conditional_select(lhs: Self, rhs: Self, predicate: bool) -> Self {\n        let params = lhs.params;\n        assert(params == rhs.params);\n        Self { limbs: conditional_select(lhs.limbs, rhs.limbs, predicate), params }\n    }\n\n    pub fn is_zero(self) -> bool {\n        is_zero::<N, MOD_BITS>(self.limbs)\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::ops::Add for RuntimeBigNum<N, MOD_BITS> {\n    // Note: this method is expensive! Try to craft quadratic relations and directly evaluate them\n    //       via evaluate_quadratic_expression\n    fn add(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        Self { limbs: add::<_, MOD_BITS>(params, self.limbs, other.limbs), params }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::ops::Sub for RuntimeBigNum<N, MOD_BITS> {\n    // Note: this method is expensive! Try to craft quadratic relations and directly evaluate them\n    //       via evaluate_quadratic_expression\n    fn sub(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        Self { limbs: sub::<_, MOD_BITS>(params, self.limbs, other.limbs), params }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::ops::Mul for RuntimeBigNum<N, MOD_BITS> {\n    // Note: this method is expensive! Try to craft quadratic relations and directly evaluate them\n    //       via evaluate_quadratic_expression\n    // e.g. performing a sum of multiple multiplications and additions via `evaluate_quadratic_expression`\n    //      will create much fewer constraints than calling `mul` and `add` directly\n    fn mul(self, other: Self) -> Self {\n        let params = self.params;\n        assert(params == other.params);\n        Self { limbs: mul::<_, MOD_BITS>(params, self.limbs, other.limbs), params }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::ops::Div for RuntimeBigNum<N, MOD_BITS> {\n    // Note: this method is expensive! Witness computation is extremely expensive as it requires modular exponentiation\n    fn div(self, divisor: Self) -> Self {\n        let params = self.params;\n        assert(params == divisor.params);\n        Self { limbs: div::<_, MOD_BITS>(params, self.limbs, divisor.limbs), params }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> Neg for RuntimeBigNum<N, MOD_BITS> {\n    fn neg(self) -> Self {\n        let params = self.params;\n        Self { limbs: neg::<_, MOD_BITS>(params, self.limbs), params }\n    }\n}\n\nimpl<let N: u32, let MOD_BITS: u32> std::cmp::Eq for RuntimeBigNum<N, MOD_BITS> {\n    fn eq(self, other: Self) -> bool {\n        let params = self.params;\n        assert(params == other.params);\n        eq::<_, MOD_BITS>(params, self.limbs, other.limbs)\n    }\n}\n",
            "path": "/Users/himank/nargo/github.com/noir-lang/noir-bignum/v0.6.0/src/runtime_bignum.nr"
        },
        "117": {
            "source": "use crate::constants::TWO_POW_120;\n\nunconstrained fn split_120_bits(mut x: Field) -> (u128, u128) {\n    // Here we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such that the field division is equivalent to integer division.\n    let low = (x as u128) % TWO_POW_120;\n    let high = ((x - low as Field) / TWO_POW_120 as Field) as u128;\n    (low, high)\n}\n\npub(crate) unconstrained fn __normalize_limbs<let N: u32>(\n    input: [Field; N],\n    range: u32,\n) -> [u128; N] {\n    let mut normalized: [u128; N] = [0; N];\n    let mut next: Field = input[0];\n    for i in 0..(range - 1) {\n        let (lo, hi) = split_120_bits(next);\n        normalized[i] = lo as u128;\n        next = input[i + 1] + hi as Field;\n    }\n    {\n        let (lo, hi) = split_120_bits(next);\n        normalized[range - 1] = lo as u128;\n        assert(hi == 0);\n    }\n    normalized\n}\n",
            "path": "/Users/himank/nargo/github.com/noir-lang/noir-bignum/v0.6.0/src/utils/split_bits.nr"
        },
        "135": {
            "source": "use std::hash::sha256_compression;\nuse std::runtime::is_unconstrained;\n\nuse constants::{\n    BLOCK_BYTE_PTR, BLOCK_SIZE, HASH, INITIAL_STATE, INT_BLOCK, INT_BLOCK_SIZE, INT_SIZE,\n    INT_SIZE_PTR, MSG_BLOCK, MSG_SIZE_PTR, STATE, TWO_POW_16, TWO_POW_24, TWO_POW_32, TWO_POW_8,\n};\n\nmod constants;\nmod tests;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    assert(message_size <= N);\n\n    if std::runtime::is_unconstrained() {\n        // Safety: SHA256 is running as an unconstrained function.\n        unsafe {\n            __sha256_var(msg, message_size)\n        }\n    } else {\n        let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n        // Intermediate hash, starting with the canonical initial value\n        let mut h: STATE = INITIAL_STATE;\n        // Pointer into msg_block on a 64 byte scale\n        let mut msg_byte_ptr = 0;\n        let num_blocks = N / BLOCK_SIZE;\n        for i in 0..num_blocks {\n            let msg_start = BLOCK_SIZE * i;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n\n            // If the block is filled, compress it.\n            // An un-filled block is handled after this loop.\n            if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n                h = sha256_compression(msg_block, h);\n            }\n        }\n\n        let modulo = N % BLOCK_SIZE;\n        // Handle setup of the final msg block.\n        // This case is only hit if the msg is less than the block size,\n        // or our message cannot be evenly split into blocks.\n        if modulo != 0 {\n            let msg_start = BLOCK_SIZE * num_blocks;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        }\n\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        if msg_byte_ptr == BLOCK_SIZE {\n            msg_byte_ptr = 0;\n        }\n\n        // Pad the rest such that we have a [u32; 2] block at the end representing the length\n        // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n        // Here we rely on the fact that everything beyond the available input is set to 0.\n        let index = msg_byte_ptr / INT_SIZE;\n        msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n        msg_byte_ptr = msg_byte_ptr + 1;\n        let last_block = msg_block;\n\n        // If we don't have room to write the size, compress the block and reset it.\n        if msg_byte_ptr > MSG_SIZE_PTR {\n            h = sha256_compression(msg_block, h);\n            // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n            msg_byte_ptr = 0;\n        }\n\n        msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\n\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n\n        hash_final_block(msg_block, h)\n    }\n}\n\n// Variable size SHA-256 hash\nunconstrained fn __sha256_var<let N: u32>(msg: [u8; N], message_size: u32) -> HASH {\n    let num_full_blocks = message_size / BLOCK_SIZE;\n    // Intermediate hash, starting with the canonical initial value\n    let mut h: STATE = INITIAL_STATE;\n    // Pointer into msg_block on a 64 byte scale\n    for i in 0..num_full_blocks {\n        let (msg_block, _) = build_msg_block(msg, message_size, BLOCK_SIZE * i);\n        h = sha256_compression(msg_block, h);\n    }\n\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    let modulo = message_size % BLOCK_SIZE;\n    let (mut msg_block, mut msg_byte_ptr): (INT_BLOCK, u32) = if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_full_blocks;\n        let (new_msg_block, new_msg_byte_ptr) = build_msg_block(msg, message_size, msg_start);\n\n        (new_msg_block, new_msg_byte_ptr)\n    } else {\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        ([0; INT_BLOCK_SIZE], 0)\n    };\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    let index = msg_byte_ptr / INT_SIZE;\n    msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n    // If we don't have room to write the size, compress the block and reset it.\n    let (h, mut msg_byte_ptr): (STATE, u32) = if msg_byte_ptr >= MSG_SIZE_PTR {\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        (sha256_compression(msg_block, h), 0)\n    } else {\n        (h, msg_byte_ptr + 1)\n    };\n    msg_block = attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size);\n\n    hash_final_block(msg_block, h)\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeros.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if message_size < msg_start {\n        // This function is sometimes called with `msg_start` past the end of the message.\n        // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n        0\n    } else if message_size < msg_start + BLOCK_SIZE {\n        message_size - msg_start\n    } else {\n        BLOCK_SIZE\n    };\n\n    // Figure out the number of items in the int array that we have to pack.\n    // e.g. if the input is [0,1,2,3,4,5] then we need to pack it as 2 items: [0123, 4500]\n    let mut int_input = block_input / INT_SIZE;\n    if block_input % INT_SIZE != 0 {\n        int_input = int_input + 1;\n    };\n\n    for i in 0..int_input {\n        let mut msg_item: u32 = 0;\n        // Always construct the integer as 4 bytes, even if it means going beyond the input.\n        for j in 0..INT_SIZE {\n            let k = i * INT_SIZE + j;\n            let msg_byte = if k < block_input {\n                msg[msg_start + k]\n            } else {\n                0\n            };\n            msg_item = lshift8(msg_item, 1) + msg_byte as u32;\n        }\n        msg_block[i] = msg_item;\n    }\n\n    // Returning the index as if it was a 64 byte array.\n    // We have to project it down to 16 items and bit shifting to get a byte back if we need it.\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\n// If `message_size` is less than `msg_start` then this is called with the old non-empty block;\n// in that case we can skip verification, ie. no need to check that everything is zero.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr = 0;\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n    // We might have to go beyond the input to pad the fields.\n    if msg_end % INT_SIZE != 0 {\n        msg_end = msg_end + INT_SIZE - msg_end % INT_SIZE;\n    }\n\n    // Reconstructed packed item.\n    let mut msg_item: u32 = 0;\n\n    // Inclusive at the end so that we can compare the last item.\n    let mut i: u32 = 0;\n    for k in msg_start..=msg_end {\n        if k % INT_SIZE == 0 {\n            // If we consumed some input we can compare against the block.\n            if (msg_start < message_size) & (k > msg_start) {\n                assert_eq(msg_block[i], msg_item as u32);\n                i = i + 1;\n                msg_item = 0;\n            }\n        }\n        // Shift the accumulator\n        msg_item = lshift8(msg_item, 1);\n        // If we have input to consume, add it at the rightmost position.\n        if k < message_size & k < msg_end {\n            msg_item = msg_item + msg[k] as u32;\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeros by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // Check all the way to the end of the block.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_BLOCK_SIZE);\n}\n\n// Verify that a region of ints in the message block are (partially) zeroed,\n// up to an (exclusive) maximum which can either be the end of the block\n// or just where the size is to be written.\nfn verify_msg_block_zeros(\n    msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    max_int_byte_ptr: u32,\n) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // First integer which is supposed to be (partially) zero.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        let zeros = INT_SIZE - modulo;\n        let mask = if zeros == 3 {\n            TWO_POW_24\n        } else if zeros == 2 {\n            TWO_POW_16\n        } else {\n            TWO_POW_8\n        };\n        assert_eq(msg_block[int_byte_ptr] % mask, zero);\n        int_byte_ptr = int_byte_ptr + 1;\n    }\n\n    // Check the rest of the items.\n    for i in 0..max_int_byte_ptr {\n        if i >= int_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Verify that up to the byte pointer the two blocks are equal.\n// At the byte pointer the new block can be partially zeroed.\nfn verify_msg_block_equals_last(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n) {\n    // msg_byte_ptr is the position at which they are no longer have to be the same.\n    // First integer which is supposed to be (partially) zero contains that pointer.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Reconstruct the partially zero item from the last block.\n        let last_field = last_block[int_byte_ptr];\n        let mut msg_item: u32 = 0;\n        // Reset to where they are still equal.\n        msg_byte_ptr = msg_byte_ptr - modulo;\n        for i in 0..INT_SIZE {\n            msg_item = lshift8(msg_item, 1);\n            if i < modulo {\n                msg_item = msg_item + get_item_byte(last_field, msg_byte_ptr) as u32;\n                msg_byte_ptr = msg_byte_ptr + 1;\n            }\n        }\n        assert_eq(msg_block[int_byte_ptr], msg_item);\n    }\n\n    for i in 0..INT_SIZE_PTR {\n        if i < int_byte_ptr {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n    }\n}\n\n// Set the rightmost `zeros` number of bytes to 0.\n#[inline_always]\nfn set_item_zeros(item: u32, zeros: u8) -> u32 {\n    lshift8(rshift8(item, zeros), zeros)\n}\n\n// Replace one byte in the item with a value, and set everything after it to zero.\nfn set_item_byte_then_zeros(msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR, msg_byte: u8) -> u32 {\n    let zeros = INT_SIZE - msg_byte_ptr % INT_SIZE;\n    let zeroed_item = set_item_zeros(msg_item, zeros as u8);\n    let new_item = byte_into_item(msg_byte, msg_byte_ptr);\n    zeroed_item + new_item\n}\n\n// Get a byte of a message item according to its overall position in the `BLOCK_SIZE` space.\nfn get_item_byte(mut msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR) -> u8 {\n    // How many times do we have to shift to the right to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    msg_item = rshift8(msg_item, shifts as u8);\n    // At this point the byte we want is in the rightmost position.\n    msg_item as u8\n}\n\n// Project a byte into a position in a field based on the overall block pointer.\n// For example putting 1 into pointer 5 would be 100, because overall we would\n// have [____, 0100] with indexes [0123,4567].\n#[inline_always]\nfn byte_into_item(msg_byte: u8, msg_byte_ptr: BLOCK_BYTE_PTR) -> u32 {\n    let mut msg_item = msg_byte as u32;\n    // How many times do we have to shift to the left to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    lshift8(msg_item, shifts as u8)\n}\n\n// Construct a field out of 4 bytes.\n#[inline_always]\nfn make_item(b0: u8, b1: u8, b2: u8, b3: u8) -> u32 {\n    let mut item = b0 as u32;\n    item = lshift8(item, 1) + b1 as u32;\n    item = lshift8(item, 1) + b2 as u32;\n    item = lshift8(item, 1) + b3 as u32;\n    item\n}\n\n// Shift by 8 bits to the left between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise multiplies by 256.\n#[inline_always]\nfn lshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        // Brillig wouldn't shift 0<<4 without overflow.\n        if shifts >= 4 {\n            0\n        } else {\n            item << (8 * shifts)\n        }\n    } else {\n        // We can do a for loop up to INT_SIZE or an if-else.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item * TWO_POW_8\n        } else if shifts == 2 {\n            item * TWO_POW_16\n        } else if shifts == 3 {\n            item * TWO_POW_24\n        } else {\n            // Doesn't make sense, but it's most likely called on 0 anyway.\n            0\n        }\n    }\n}\n\n// Shift by 8 bits to the right between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise divides by 256.\nfn rshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        item >> (8 * shifts)\n    } else {\n        // Division wouldn't work on `Field`.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item / TWO_POW_8\n        } else if shifts == 2 {\n            item / TWO_POW_16\n        } else if shifts == 3 {\n            item / TWO_POW_24\n        } else {\n            0\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 bits (i.e. until msg_byte_ptr = 56).\n    // There can be one item which has to be partially zeroed.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Index of the block in which we find the item we need to partially zero.\n        let i = msg_byte_ptr / INT_SIZE;\n        let zeros = INT_SIZE - modulo;\n        msg_block[i] = set_item_zeros(msg_block[i], zeros as u8);\n        msg_byte_ptr = msg_byte_ptr + zeros;\n    }\n\n    // The rest can be zeroed without bit shifting anything.\n    for i in (msg_byte_ptr / INT_SIZE)..INT_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    // Set the last two 4 byte ints as the first/second half of the 8 bytes of the length.\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..=1 {\n        let shift = i * 4;\n        msg_block[INT_SIZE_PTR + i] = make_item(\n            len_bytes[shift],\n            len_bytes[shift + 1],\n            len_bytes[shift + 2],\n            len_bytes[shift + 3],\n        );\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`,\n// and that everything between the byte pointer and the size pointer was zeroed,\n// and that everything before the byte pointer was untouched.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    // Check zeros up to the size pointer.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_SIZE_PTR);\n\n    // Check that up to the pointer we match the last block.\n    verify_msg_block_equals_last(msg_block, last_block, msg_byte_ptr);\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let mut reconstructed_len: u64 = 0;\n    for i in INT_SIZE_PTR..INT_BLOCK_SIZE {\n        reconstructed_len = reconstructed_len * TWO_POW_32;\n        reconstructed_len = reconstructed_len + msg_block[i] as u64;\n    }\n    let len = 8 * message_size as u64;\n    assert_eq(reconstructed_len, len);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_block, state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[j] as Field).to_be_bytes();\n        for k in 0..4 {\n            out_h[4 * j + k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod equivalence_test {\n\n    #[test]\n    fn test_implementations_agree(msg: [u8; 100], message_size: u64) {\n        let message_size = message_size % 100;\n        let unconstrained_sha = unsafe { super::__sha256_var(msg, message_size as u32) };\n        let sha = super::sha256_var(msg, message_size);\n        assert_eq(sha, unconstrained_sha);\n    }\n}\n",
            "path": "/Users/himank/nargo/github.com/noir-lang/sha256/v0.1.2/src/sha256.nr"
        },
        "146": {
            "source": "use dep::bignum::RuntimeBigNum;\n\n/**\n * @brief Compare a recovered byte hash from an RSA signature to the original message hash\n * @details Taken from https://github.com/richardliang/noir-rsa\n **/\nfn compare_signature_sha256<let N: u32>(padded_sha256_hash: [u8; N], msg_hash: [u8; 32]) -> bool {\n    // Get length of sig (e.g. 1048 = 128 bytes, 2048 = 256 bytes)\n    // NOTE: Assume MAX_BYTES < 2^32 bit number. MAX_BYTES of 259 > 2^8 bits so need to cast it to u32\n    for i in 0..32 {\n        // Padded hash is reversed\n        assert(padded_sha256_hash[31 - i] == msg_hash[i]);\n    }\n\n    let hash_prefix: [u8; 19] =\n        [32, 4, 0, 5, 1, 2, 4, 3, 101, 1, 72, 134, 96, 9, 6, 13, 48, 49, 48];\n\n    for i in 32..51 {\n        assert(hash_prefix[i - 32] == padded_sha256_hash[i]);\n    }\n\n    assert(padded_sha256_hash[51] == 0);\n\n    // Sub 32 bytes for hash, 19 bytes for prefix, 1 byte for 0, 1 byte for 1, 1 byte for 0\n    let ps_len = N - 54;\n    for i in 52..N {\n        if i < 52 + ps_len {\n            // PS padding which depends on RSA modulus / sig length. 1024 bits = 128 bytes = 128 - 54 = 74 bytes of 0xFF padding\n            assert(padded_sha256_hash[i] == 255);\n        } else if i == 52 + ps_len {\n            // Pad 0x01\n            assert(padded_sha256_hash[i] == 1);\n        } else if i == 53 + ps_len {\n            // 0x00\n            assert(padded_sha256_hash[i] == 0);\n        } else {\n            // Padded with 0 until MAX_BYTES\n            assert(padded_sha256_hash[i] == 0);\n        }\n    }\n\n    true\n}\n\n/**\n * @brief Verify an RSA signature generated via the pkcs1v15 signature scheme.\n * @note The `exponent` can be either 65537 or 3 (i.e. the most common values in use for RSA)\n * Rough cost: 2,048 bit RSA: 26,888 gates per verification\n *             1,024 bit RSA: 11,983 gates per verification\n * A circuit that verifies 1 signature (and does nothing else) will cost ~32k due to initialization costs of lookup tables\n **/\npub fn verify_sha256_pkcs1v15<let NumLimbs: u32, let ModBits: u32>(\n    msg_hash: [u8; 32],\n    sig: RuntimeBigNum<NumLimbs, ModBits>,\n    exponent: u32,\n) -> bool {\n    assert((exponent == 3) | (exponent == 65537), \"Exponent must be 65537 or 3\");\n    let mut exponentiated = sig * sig; // sig^2\n    if exponent == 65537 {\n        // e = 65537 = 1 0000 0000 0000 0001\n        exponentiated = exponentiated * exponentiated; // sig^4\n        exponentiated = exponentiated * exponentiated; // sig^8\n        exponentiated = exponentiated * exponentiated; // sig^16\n        exponentiated = exponentiated * exponentiated; // sig^32\n        exponentiated = exponentiated * exponentiated; // sig^64\n        exponentiated = exponentiated * exponentiated; // sig^128\n        exponentiated = exponentiated * exponentiated; // sig^256\n        exponentiated = exponentiated * exponentiated; // sig^512\n        exponentiated = exponentiated * exponentiated; // sig^1024\n        exponentiated = exponentiated * exponentiated; // sig^2048\n        exponentiated = exponentiated * exponentiated; // sig^4096\n        exponentiated = exponentiated * exponentiated; // sig^8192\n        exponentiated = exponentiated * exponentiated; // sig^16384\n        exponentiated = exponentiated * exponentiated; // sig^32768\n        exponentiated = exponentiated * exponentiated; // sig^65536\n    }\n    // otherwise, e = 3 = 11\n    exponentiated = exponentiated * sig; // either sig^2 * sig = sig^3 or sig^65536 * sig = sig^65537\n    let mut padded_sha256_hash_bytes: [u8; (ModBits + 7) / 8] = exponentiated.to_le_bytes();\n    compare_signature_sha256(padded_sha256_hash_bytes, msg_hash)\n}\n\nmod tests {\n\n    use crate::types::RBN2048;\n    use super::verify_sha256_pkcs1v15;\n    use bignum::params::BigNumParams;\n    use bignum::RuntimeBigNum;\n\n    #[test]\n    fn test_verify_sha256_pkcs1v15_1024() {\n        // Output of `cargo run -- --msg \"hello world! test#123\" --bits 1024` in the `signature_gen` directory\n        let sha256_hash: [u8; 32] = [\n            220, 155, 229, 143, 122, 133, 55, 215, 75, 44, 132, 111, 57, 33, 248, 84, 213, 170, 193,\n            96, 253, 57, 124, 13, 251, 42, 92, 147, 105, 172, 233, 85,\n        ];\n\n        let params: BigNumParams<9, 1024> = BigNumParams::new(\n            false,\n            [\n                0xab238ad9cb37979a43aefbf10be8fb,\n                0x31347febe45fe8c2dac1dd30900704,\n                0xa5a9a6b9cd0cc2b9d13bbd4e068263,\n                0x5eac6390f7873fe97ff9bb14a173ea,\n                0xbc41f700c91fd733a2c63177bbdbd4,\n                0x41442bd58769a3595b659a2ec9c6be,\n                0x4ddc91395f330382aa2e2d3fbe147,\n                0x3d008ff255a0bc71c7887f5728ba1,\n                0xb640c3a8f511c64e,\n            ],\n            [\n                0x5d53d2634c6a0918266043968ce263,\n                0x5dd4be3dce0323a492ee9340aec4db,\n                0xf82d0e2e5c8319f01a460c72c01854,\n                0x236e6fc6e62e8a1d522acda5fb3892,\n                0xdaf755619d66e580901aa224d03174,\n                0x8366291616480e7e1f202dbcedda87,\n                0x40ba1202537d1e94561ccc05265586,\n                0x69b993d857ba89ea5de9822aeb4b93,\n                0x167968c0000761a273,\n            ],\n        );\n\n        let signature: RuntimeBigNum<9, 1024> = RuntimeBigNum {\n            params,\n            limbs: [\n                0xc3850e84ea02da3f028ff422f4d6a9,\n                0x9761f0bd9021f76d45c60df0670a19,\n                0xc1ede421a43607ab623ed4d5a17fc8,\n                0x86197b4315206f4d53200b42555831,\n                0xe95783b69db28c26a83706f39d04cd,\n                0x18b178dc1a9ec76fb22b57e4dfa703,\n                0xdd0e19cd5a09ab48e7af4d0e3470e3,\n                0x10004dfab1cf91304e80e6baa4dfc7,\n                0x241c3fd77b90adef,\n            ],\n        };\n\n        assert(verify_sha256_pkcs1v15(sha256_hash, signature, 65537));\n    }\n\n    #[test]\n    fn test_verify_sha256_pkcs1v15_2048() {\n        // Output of `cargo run -- --msg \"Hello World! This is Noir-RSA\"` in the `signature_gen` directory\n        let sha256_hash: [u8; 32] = [\n            91, 207, 46, 60, 22, 153, 217, 144, 2, 127, 224, 143, 181, 45, 32, 120, 122, 131, 166,\n            79, 166, 183, 43, 158, 116, 105, 73, 207, 196, 77, 33, 5,\n        ];\n\n        let params: BigNumParams<18, 2048> = BigNumParams::new(\n            false,\n            [\n                0x8d5e7d9daedd6cfd1c9bdf0227e05b,\n                0xbfb937fc4d3cf02cc0af780f3cab44,\n                0xd20637ef7adcf5d238ee87bccc9bca,\n                0xb9db4f2663108e2f8b673f7612ae8b,\n                0x85f894ef669b36bfd3d86b0a28873,\n                0xdcc70e1884e38b8229cce3b884121d,\n                0x35488d1138e0b03e1676f7f5d8a5b3,\n                0xe1a97820e7dcbb4eab35c9b71bb273,\n                0x97d19eb3c63249ddbfcff915863f54,\n                0x3a78c7af6da0f6af0d67b1ca4b6065,\n                0xd7a3c433c020f624821e5e678c7d69,\n                0x52d5b53240feae82ffea3d2a3d9b09,\n                0xb8aad5e19e2163f68997c6fdd71906,\n                0x5db432d06e8b0bf59511100c7894e2,\n                0xadc0bbc4c54da10d1cc88438ea3127,\n                0xece1cf6a1501109cd2734d5893c8d9,\n                0x7196b90acdf06c31b1288064fd0c27,\n                0xc8,\n            ],\n            [\n                0x1b1deccf4dbde852c34a5d6908a0f,\n                0xbc9e5bdab22f023fbcca58692bccf5,\n                0x1f65439685623e45396ff55751c3bf,\n                0x2b6ad2c5f8e3aac15d0ccbab816bfa,\n                0x5ca2e8e3048243c16c708a8030ab0d,\n                0x30079bfeb1fa51e5501581173ca19c,\n                0xff8d5f6bea485fdcc2716327f69ab4,\n                0x36b599d81589416b5b5f037986b999,\n                0x75612e34a4ff29f0a19a7823512f58,\n                0x288b6897929b54c3b26a5faa07c00f,\n                0x4b5675fa13ab7444f1f047d3eb1bbe,\n                0x6ba0ac610ef9f267ab30fe25bb1c84,\n                0xa386b48ee03168d5cea3ecb9dc901f,\n                0xacf1a01f7dba44e050c976142fb1f6,\n                0x97a63b5cb7efc60d3502946aec63cf,\n                0x12cc1d5cab10a1e9e2398d29b9e3ef,\n                0x4635cf25c66e76bba8034df46204fb,\n                0x146f,\n            ],\n        );\n\n        let signature: RuntimeBigNum<18, 2048> = RuntimeBigNum {\n            params,\n            limbs: [\n                0xad29e07d16a278de49a371b9760a27,\n                0x86311920cc0e17a3c20cdff4c56dbb,\n                0x863556c6c5247dd83668dd825716ae,\n                0xc247c960945f4485b46c33b87425ca,\n                0x7326463c5c4cd5b08e21b938d9ed9a,\n                0x4f89fe0c82da08a0259eddb34d0da1,\n                0x43a74e76d4e1bd2666f1591889af0d,\n                0x240f7b80f0ff29f4253ee3019f832d,\n                0xc6edd131fbaaf725fd423dac52b362,\n                0x85f9732679242163e8afff44f6104d,\n                0xd3c3bbcb1757013fd6fb80f31dd9a6,\n                0x9008633f15df440e6df6d21ee585a2,\n                0x324df3425ed256e283be5b6b761741,\n                0xc60c1302929bd0e07caa4aeff4e8fd,\n                0x600d804ff13ba8d0e1bc9508714212,\n                0x50f7e75e5751d7edd61167027926be,\n                0x0db41d39442023e1420a8a84fe81d9,\n                0xab,\n            ],\n        };\n        assert(verify_sha256_pkcs1v15(sha256_hash, signature, 65537));\n    }\n\n    #[test]\n    fn test_verify_sha256_pkcs1v15_2048_exponent_3() {\n        // Output of `cargo run -- --msg \"hello world\" -e 3` in the `signature_gen` directory\n        let sha256_hash: [u8; 32] = [\n            185, 77, 39, 185, 147, 77, 62, 8, 165, 46, 82, 215, 218, 125, 171, 250, 196, 132, 239,\n            227, 122, 83, 128, 238, 144, 136, 247, 172, 226, 239, 205, 233,\n        ];\n\n        let params: BigNumParams<18, 2048> = BigNumParams::new(\n            false,\n            [\n                0xe40ee47801326543c8e84b85d567c1,\n                0x5b54ea87f0ce29de1995697b0696fd,\n                0x457078f8fdce68b437cac0970b2452,\n                0x473ec776fee3731b6ab06e35875ddc,\n                0x62dedd594e5f12c80c3ccb5791a6cd,\n                0xecb934b9d8272c5e3a418145345499,\n                0xd1af643b3d785470ed0c6cd633f706,\n                0xb58a57b9e96eccbdfc7c17f0333d4,\n                0x2ebd34b5039fc596504927c282c60d,\n                0x3a44928a74f25fc1043bb37ce4dfa8,\n                0x91448459f9617fac33a2816162ac9e,\n                0x70cb910d9f3e1a78864640ec6c8240,\n                0x9aed33f6b31f1c9de67248a98c180,\n                0x7f1416e032c79488c94b311e87bd9c,\n                0x7191b4ebb1b3fffa949fa48ed01e5,\n                0x350a75cbaeca6bfdd71ca83cdbcae9,\n                0xfb1d274fa207457c6814d42c09f9cf,\n                0xd4,\n            ],\n            [\n                0x803bf4d38110a7d37fdd05f590dee9,\n                0xa68d317c933f37cab5ab4e7c00a3b9,\n                0x476a05a536bf5f2aa1b8850146cba7,\n                0xca297ea8b5528d91d4836ff27c30ab,\n                0x75cf2eaab76eefa12bbd570f1aea9f,\n                0x8f6a8ab877d9c5bcd98c37bdc5c2d3,\n                0xd497db1f6ebe83decacaa647fabea6,\n                0x686b27ca330e25e7a7cf197f6433ef,\n                0xfde04d2225c8308b07580af0058a0f,\n                0xa29fb69777c0e916976243b2b09855,\n                0xf983592285852e7e1c2cb3ae968323,\n                0x673608017f9f5acf67a01b73728d70,\n                0xeeff82521c0bc432a05f4b7444fac0,\n                0x85a89c4d229f60aaa3aa7ac7dac1e2,\n                0xcfecff93bc9fbfe0d6dff6091f2db8,\n                0xf20f047dcb224b4447bd098c07f8c2,\n                0x554bb53cadeb3eaab911a189f90227,\n                0x133b,\n            ],\n        );\n\n        let signature: RuntimeBigNum<18, 2048> = RuntimeBigNum {\n            params,\n            limbs: [\n                0xa250eff812c63eaaeaa3f04641c05f,\n                0xecc09613cb8b289c1f37c8f92e6a05,\n                0x2c0a0510058360c07af65d46f594fd,\n                0x943d67513363d3de430c94a1dafe7c,\n                0x511ec8e9b10bc6c6ff0d6c232ccf92,\n                0x50ffd07b3c093b3f5fc027de847731,\n                0xc268e1489449943fdafdf89ff168c3,\n                0x0b8b7f9f49b492f78fda58d252f23a,\n                0x491c6c4ef836a6a8730b7bf81e865e,\n                0x8746c75fb079d014e419543f56d7f0,\n                0x65804c417d6168a8bc0025d255cebf,\n                0xf695e91b77890b8e3fd775fa56e627,\n                0x5e90001c0218550f4083ae28025a2f,\n                0x526bd4eff34f25f62a698f0470e0a6,\n                0x7f224306a7d9daf536b1559434c6c6,\n                0x88809f16fe1fcea3c87511d9319735,\n                0x7694685fee0bfab4a9196b92ec6f2e,\n                0xa7,\n            ],\n        };\n\n        assert(verify_sha256_pkcs1v15(sha256_hash, signature, 3));\n    }\n\n    #[test]\n    fn smoke_test() {\n        // Output of `cargo run -- --msg \"hello world\"` in the `signature_gen` directory\n        // Create runtime params:\n        let modulus_limbs = [\n            0x65af46d235241cf0e8fbe8cff4abb7,\n            0xeead39ba3f377ddd5ccb2ef2085190,\n            0xe483f94c0a98e8b618d92fb926f596,\n            0x1fa8c1b2c62cca6db090cd74a29db2,\n            0xc38e22042fcb74585a7e535301f50f,\n            0xcbc4378e5212752743ae78a75a44a9,\n            0xf5acc41788d9a346a0f75630a8b2b6,\n            0xf7a741bb3ecf1aadd5a327f362abd8,\n            0x4d5f24e815db43a1b2cc2ba40f8715,\n            0xe501f1a01305cb198475a4bff0da2e,\n            0xd541b78cfbc2b314083c340840c82c,\n            0xa0ab069c26b2a0458f4c642bf72526,\n            0x2ccb676d8f22517116fee0d2340533,\n            0x7cf2a7cf772025c0a83747bbc18228,\n            0xf9475f17988a56f17b3bdf88dc72dc,\n            0x4ff228bee24415fae7a7c05771e830,\n            0x55acd96b485515c38906106cf0d189,\n            0xb9,\n        ];\n        let redc_limbs = [\n            0x172c8f156f020ad88d30fa3ba47f03,\n            0x1740a43a67cb9a7be1ac1422d77246,\n            0x2d967be1edf369834317e04856e591,\n            0x65d9fa0de5fdab598c04d9a515156a,\n            0xc6791a661ea7621db7e6c4ec48f466,\n            0xa4a1a7c06d3e8a0bcbc540c6af6788,\n            0xdcaffeb149f5bf646caa00d7355715,\n            0xb75471630a9d0fefb5cb61e66991a1,\n            0x97c041a0fc30fdff3d5ed16997da02,\n            0xbfbe7d217694b269e1ed37819c2f17,\n            0x1b44ffc3180531e2ab8bdf7848a3a9,\n            0x9f004af11132cb68bb55998ed7616a,\n            0x1b15dbbb96ce80f479724bbd768a0c,\n            0x59ba1419093ae6ed2592ffb3065867,\n            0xa35b69affa3bb3f4713f315e50b584,\n            0xa873210f83a6de0d8cbb816af3e37,\n            0xbe4fe7cf98da87ec87638030797e92,\n            0x1619,\n        ];\n\n        let signature_limbs = [\n            0x2f397c4611d4a4271453e1e50e1578,\n            0xe506a7f47c721a4943783e8ad459e6,\n            0x6cc4ae1d91cb381cba9673470999fb,\n            0x1e127364d07f94e58227f50fbf5687,\n            0xf64a2579c7189f882d68832d16faa4,\n            0x3b014b74c6c6f76f2f8af170fa0fe4,\n            0x7df41e68c86815a6fdc33968c66b67,\n            0x6a57ac06282527242fddb6ed08dbdc,\n            0xac40d37b819c4b6193f90a634e4fc7,\n            0x96606ed166a7f032d858cd40ac73a5,\n            0x8eb7d4351159a46733f92610d5c597,\n            0xc8e8e9faa9738e82dbe774a3f5cf07,\n            0x89ca84fd54ee3d5cca87c9f178375e,\n            0xdb7a1465fc76507ea498a351af70dd,\n            0x6ac6fe14f51c711f983125c776f712,\n            0x3254c17fef51bf4194a8a1674634e3,\n            0xee38c83c77c6e1ff7b70a5d9d1dd0f,\n            0x26,\n        ];\n\n        let hash: [u8; 32] = [\n            0xb9, 0x4d, 0x27, 0xb9, 0x93, 0x4d, 0x3e, 0x08, 0xa5, 0x2e, 0x52, 0xd7, 0xda, 0x7d,\n            0xab, 0xfa, 0xc4, 0x84, 0xef, 0xe3, 0x7a, 0x53, 0x80, 0xee, 0x90, 0x88, 0xf7, 0xac,\n            0xe2, 0xef, 0xcd, 0xe9,\n        ];\n\n        let has_multiplicative_inverse = false;\n        let params: BigNumParams<18, 2048> =\n            BigNumParams::new(has_multiplicative_inverse, modulus_limbs, redc_limbs);\n\n        let signature: RBN2048 = RBN2048::from_array(params, signature_limbs);\n\n        assert(verify_sha256_pkcs1v15(hash, signature, 65537));\n    }\n}\n",
            "path": "/Users/himank/nargo/github.com/noir-lang/noir_rsa/v0.7.0/src/rsa.nr"
        }
    },
    "names": [
        "main"
    ],
    "brillig_names": [
        "build_msg_block",
        "attach_len_to_msg_block",
        "__mul",
        "__compute_quadratic_expression_with_borrow_flags",
        "directive_integer_quotient",
        "directive_invert",
        "directive_to_radix"
    ]
}